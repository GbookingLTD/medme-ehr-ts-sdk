/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 315:
/***/ (function(module, __unused_webpack_exports, __nccwpck_require__) {

// Generated by CoffeeScript 1.12.2
(function() {
  var InvalidStateError, NetworkError, ProgressEvent, SecurityError, SyntaxError, XMLHttpRequest, XMLHttpRequestEventTarget, XMLHttpRequestUpload, http, https, os, url,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  XMLHttpRequestEventTarget = (function() {
    function XMLHttpRequestEventTarget() {
      this.onloadstart = null;
      this.onprogress = null;
      this.onabort = null;
      this.onerror = null;
      this.onload = null;
      this.ontimeout = null;
      this.onloadend = null;
      this._listeners = {};
    }

    XMLHttpRequestEventTarget.prototype.onloadstart = null;

    XMLHttpRequestEventTarget.prototype.onprogress = null;

    XMLHttpRequestEventTarget.prototype.onabort = null;

    XMLHttpRequestEventTarget.prototype.onerror = null;

    XMLHttpRequestEventTarget.prototype.onload = null;

    XMLHttpRequestEventTarget.prototype.ontimeout = null;

    XMLHttpRequestEventTarget.prototype.onloadend = null;

    XMLHttpRequestEventTarget.prototype.addEventListener = function(eventType, listener) {
      var base;
      eventType = eventType.toLowerCase();
      (base = this._listeners)[eventType] || (base[eventType] = []);
      this._listeners[eventType].push(listener);
      return void 0;
    };

    XMLHttpRequestEventTarget.prototype.removeEventListener = function(eventType, listener) {
      var index;
      eventType = eventType.toLowerCase();
      if (this._listeners[eventType]) {
        index = this._listeners[eventType].indexOf(listener);
        if (index !== -1) {
          this._listeners[eventType].splice(index, 1);
        }
      }
      return void 0;
    };

    XMLHttpRequestEventTarget.prototype.dispatchEvent = function(event) {
      var eventType, j, len, listener, listeners;
      event.currentTarget = event.target = this;
      eventType = event.type;
      if (listeners = this._listeners[eventType]) {
        for (j = 0, len = listeners.length; j < len; j++) {
          listener = listeners[j];
          listener.call(this, event);
        }
      }
      if (listener = this["on" + eventType]) {
        listener.call(this, event);
      }
      return void 0;
    };

    return XMLHttpRequestEventTarget;

  })();

  http = __nccwpck_require__(8605);

  https = __nccwpck_require__(7211);

  os = __nccwpck_require__(2087);

  url = __nccwpck_require__(8835);

  XMLHttpRequest = (function(superClass) {
    extend(XMLHttpRequest, superClass);

    function XMLHttpRequest(options) {
      XMLHttpRequest.__super__.constructor.call(this);
      this.onreadystatechange = null;
      this._anonymous = options && options.anon;
      this.readyState = XMLHttpRequest.UNSENT;
      this.response = null;
      this.responseText = '';
      this.responseType = '';
      this.responseURL = '';
      this.status = 0;
      this.statusText = '';
      this.timeout = 0;
      this.upload = new XMLHttpRequestUpload(this);
      this._method = null;
      this._url = null;
      this._sync = false;
      this._headers = null;
      this._loweredHeaders = null;
      this._mimeOverride = null;
      this._request = null;
      this._response = null;
      this._responseParts = null;
      this._responseHeaders = null;
      this._aborting = null;
      this._error = null;
      this._loadedBytes = 0;
      this._totalBytes = 0;
      this._lengthComputable = false;
    }

    XMLHttpRequest.prototype.onreadystatechange = null;

    XMLHttpRequest.prototype.readyState = null;

    XMLHttpRequest.prototype.response = null;

    XMLHttpRequest.prototype.responseText = null;

    XMLHttpRequest.prototype.responseType = null;

    XMLHttpRequest.prototype.status = null;

    XMLHttpRequest.prototype.timeout = null;

    XMLHttpRequest.prototype.upload = null;

    XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
      var xhrUrl;
      method = method.toUpperCase();
      if (method in this._restrictedMethods) {
        throw new SecurityError("HTTP method " + method + " is not allowed in XHR");
      }
      xhrUrl = this._parseUrl(url);
      if (async === void 0) {
        async = true;
      }
      switch (this.readyState) {
        case XMLHttpRequest.UNSENT:
        case XMLHttpRequest.OPENED:
        case XMLHttpRequest.DONE:
          null;
          break;
        case XMLHttpRequest.HEADERS_RECEIVED:
        case XMLHttpRequest.LOADING:
          null;
      }
      this._method = method;
      this._url = xhrUrl;
      this._sync = !async;
      this._headers = {};
      this._loweredHeaders = {};
      this._mimeOverride = null;
      this._setReadyState(XMLHttpRequest.OPENED);
      this._request = null;
      this._response = null;
      this.status = 0;
      this.statusText = '';
      this._responseParts = [];
      this._responseHeaders = null;
      this._loadedBytes = 0;
      this._totalBytes = 0;
      this._lengthComputable = false;
      return void 0;
    };

    XMLHttpRequest.prototype.setRequestHeader = function(name, value) {
      var loweredName;
      if (this.readyState !== XMLHttpRequest.OPENED) {
        throw new InvalidStateError("XHR readyState must be OPENED");
      }
      loweredName = name.toLowerCase();
      if (this._restrictedHeaders[loweredName] || /^sec\-/.test(loweredName) || /^proxy-/.test(loweredName)) {
        console.warn("Refused to set unsafe header \"" + name + "\"");
        return void 0;
      }
      value = value.toString();
      if (loweredName in this._loweredHeaders) {
        name = this._loweredHeaders[loweredName];
        this._headers[name] = this._headers[name] + ', ' + value;
      } else {
        this._loweredHeaders[loweredName] = name;
        this._headers[name] = value;
      }
      return void 0;
    };

    XMLHttpRequest.prototype.send = function(data) {
      if (this.readyState !== XMLHttpRequest.OPENED) {
        throw new InvalidStateError("XHR readyState must be OPENED");
      }
      if (this._request) {
        throw new InvalidStateError("send() already called");
      }
      switch (this._url.protocol) {
        case 'file:':
          this._sendFile(data);
          break;
        case 'http:':
        case 'https:':
          this._sendHttp(data);
          break;
        default:
          throw new NetworkError("Unsupported protocol " + this._url.protocol);
      }
      return void 0;
    };

    XMLHttpRequest.prototype.abort = function() {
      if (!this._request) {
        return;
      }
      this._request.abort();
      this._setError();
      this._dispatchProgress('abort');
      this._dispatchProgress('loadend');
      return void 0;
    };

    XMLHttpRequest.prototype.getResponseHeader = function(name) {
      var loweredName;
      if (!this._responseHeaders) {
        return null;
      }
      loweredName = name.toLowerCase();
      if (loweredName in this._responseHeaders) {
        return this._responseHeaders[loweredName];
      } else {
        return null;
      }
    };

    XMLHttpRequest.prototype.getAllResponseHeaders = function() {
      var lines, name, value;
      if (!this._responseHeaders) {
        return '';
      }
      lines = (function() {
        var ref, results;
        ref = this._responseHeaders;
        results = [];
        for (name in ref) {
          value = ref[name];
          results.push(name + ": " + value);
        }
        return results;
      }).call(this);
      return lines.join("\r\n");
    };

    XMLHttpRequest.prototype.overrideMimeType = function(newMimeType) {
      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {
        throw new InvalidStateError("overrideMimeType() not allowed in LOADING or DONE");
      }
      this._mimeOverride = newMimeType.toLowerCase();
      return void 0;
    };

    XMLHttpRequest.prototype.nodejsSet = function(options) {
      var baseUrl, parsedUrl;
      if ('httpAgent' in options) {
        this.nodejsHttpAgent = options.httpAgent;
      }
      if ('httpsAgent' in options) {
        this.nodejsHttpsAgent = options.httpsAgent;
      }
      if ('baseUrl' in options) {
        baseUrl = options.baseUrl;
        if (baseUrl !== null) {
          parsedUrl = url.parse(baseUrl, false, true);
          if (!parsedUrl.protocol) {
            throw new SyntaxError("baseUrl must be an absolute URL");
          }
        }
        this.nodejsBaseUrl = baseUrl;
      }
      return void 0;
    };

    XMLHttpRequest.nodejsSet = function(options) {
      XMLHttpRequest.prototype.nodejsSet(options);
      return void 0;
    };

    XMLHttpRequest.prototype.UNSENT = 0;

    XMLHttpRequest.UNSENT = 0;

    XMLHttpRequest.prototype.OPENED = 1;

    XMLHttpRequest.OPENED = 1;

    XMLHttpRequest.prototype.HEADERS_RECEIVED = 2;

    XMLHttpRequest.HEADERS_RECEIVED = 2;

    XMLHttpRequest.prototype.LOADING = 3;

    XMLHttpRequest.LOADING = 3;

    XMLHttpRequest.prototype.DONE = 4;

    XMLHttpRequest.DONE = 4;

    XMLHttpRequest.prototype.nodejsHttpAgent = http.globalAgent;

    XMLHttpRequest.prototype.nodejsHttpsAgent = https.globalAgent;

    XMLHttpRequest.prototype.nodejsBaseUrl = null;

    XMLHttpRequest.prototype._restrictedMethods = {
      CONNECT: true,
      TRACE: true,
      TRACK: true
    };

    XMLHttpRequest.prototype._restrictedHeaders = {
      'accept-charset': true,
      'accept-encoding': true,
      'access-control-request-headers': true,
      'access-control-request-method': true,
      connection: true,
      'content-length': true,
      cookie: true,
      cookie2: true,
      date: true,
      dnt: true,
      expect: true,
      host: true,
      'keep-alive': true,
      origin: true,
      referer: true,
      te: true,
      trailer: true,
      'transfer-encoding': true,
      upgrade: true,
      'user-agent': true,
      via: true
    };

    XMLHttpRequest.prototype._privateHeaders = {
      'set-cookie': true,
      'set-cookie2': true
    };

    XMLHttpRequest.prototype._userAgent = ("Mozilla/5.0 (" + (os.type()) + " " + (os.arch()) + ") ") + ("node.js/" + process.versions.node + " v8/" + process.versions.v8);

    XMLHttpRequest.prototype._setReadyState = function(newReadyState) {
      var event;
      this.readyState = newReadyState;
      event = new ProgressEvent('readystatechange');
      this.dispatchEvent(event);
      return void 0;
    };

    XMLHttpRequest.prototype._sendFile = function() {
      if (this._url.method !== 'GET') {
        throw new NetworkError('The file protocol only supports GET');
      }
      throw new Error("Protocol file: not implemented");
    };

    XMLHttpRequest.prototype._sendHttp = function(data) {
      if (this._sync) {
        throw new Error("Synchronous XHR processing not implemented");
      }
      if ((data != null) && (this._method === 'GET' || this._method === 'HEAD')) {
        console.warn("Discarding entity body for " + this._method + " requests");
        data = null;
      } else {
        data || (data = '');
      }
      this.upload._setData(data);
      this._finalizeHeaders();
      this._sendHxxpRequest();
      return void 0;
    };

    XMLHttpRequest.prototype._sendHxxpRequest = function() {
      var agent, hxxp, request;
      if (this._url.protocol === 'http:') {
        hxxp = http;
        agent = this.nodejsHttpAgent;
      } else {
        hxxp = https;
        agent = this.nodejsHttpsAgent;
      }
      request = hxxp.request({
        hostname: this._url.hostname,
        port: this._url.port,
        path: this._url.path,
        auth: this._url.auth,
        method: this._method,
        headers: this._headers,
        agent: agent
      });
      this._request = request;
      if (this.timeout) {
        request.setTimeout(this.timeout, (function(_this) {
          return function() {
            return _this._onHttpTimeout(request);
          };
        })(this));
      }
      request.on('response', (function(_this) {
        return function(response) {
          return _this._onHttpResponse(request, response);
        };
      })(this));
      request.on('error', (function(_this) {
        return function(error) {
          return _this._onHttpRequestError(request, error);
        };
      })(this));
      this.upload._startUpload(request);
      if (this._request === request) {
        this._dispatchProgress('loadstart');
      }
      return void 0;
    };

    XMLHttpRequest.prototype._finalizeHeaders = function() {
      this._headers['Connection'] = 'keep-alive';
      this._headers['Host'] = this._url.host;
      if (this._anonymous) {
        this._headers['Referer'] = 'about:blank';
      }
      this._headers['User-Agent'] = this._userAgent;
      this.upload._finalizeHeaders(this._headers, this._loweredHeaders);
      return void 0;
    };

    XMLHttpRequest.prototype._onHttpResponse = function(request, response) {
      var lengthString;
      if (this._request !== request) {
        return;
      }
      switch (response.statusCode) {
        case 301:
        case 302:
        case 303:
        case 307:
        case 308:
          this._url = this._parseUrl(response.headers['location']);
          this._method = 'GET';
          if ('content-type' in this._loweredHeaders) {
            delete this._headers[this._loweredHeaders['content-type']];
            delete this._loweredHeaders['content-type'];
          }
          if ('Content-Type' in this._headers) {
            delete this._headers['Content-Type'];
          }
          delete this._headers['Content-Length'];
          this.upload._reset();
          this._finalizeHeaders();
          this._sendHxxpRequest();
          return;
      }
      this._response = response;
      this._response.on('data', (function(_this) {
        return function(data) {
          return _this._onHttpResponseData(response, data);
        };
      })(this));
      this._response.on('end', (function(_this) {
        return function() {
          return _this._onHttpResponseEnd(response);
        };
      })(this));
      this._response.on('close', (function(_this) {
        return function() {
          return _this._onHttpResponseClose(response);
        };
      })(this));
      this.responseURL = this._url.href.split('#')[0];
      this.status = this._response.statusCode;
      this.statusText = http.STATUS_CODES[this.status];
      this._parseResponseHeaders(response);
      if (lengthString = this._responseHeaders['content-length']) {
        this._totalBytes = parseInt(lengthString);
        this._lengthComputable = true;
      } else {
        this._lengthComputable = false;
      }
      return this._setReadyState(XMLHttpRequest.HEADERS_RECEIVED);
    };

    XMLHttpRequest.prototype._onHttpResponseData = function(response, data) {
      if (this._response !== response) {
        return;
      }
      this._responseParts.push(data);
      this._loadedBytes += data.length;
      if (this.readyState !== XMLHttpRequest.LOADING) {
        this._setReadyState(XMLHttpRequest.LOADING);
      }
      return this._dispatchProgress('progress');
    };

    XMLHttpRequest.prototype._onHttpResponseEnd = function(response) {
      if (this._response !== response) {
        return;
      }
      this._parseResponse();
      this._request = null;
      this._response = null;
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('load');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._onHttpResponseClose = function(response) {
      var request;
      if (this._response !== response) {
        return;
      }
      request = this._request;
      this._setError();
      request.abort();
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('error');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._onHttpTimeout = function(request) {
      if (this._request !== request) {
        return;
      }
      this._setError();
      request.abort();
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('timeout');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._onHttpRequestError = function(request, error) {
      if (this._request !== request) {
        return;
      }
      this._setError();
      request.abort();
      this._setReadyState(XMLHttpRequest.DONE);
      this._dispatchProgress('error');
      return this._dispatchProgress('loadend');
    };

    XMLHttpRequest.prototype._dispatchProgress = function(eventType) {
      var event;
      event = new ProgressEvent(eventType);
      event.lengthComputable = this._lengthComputable;
      event.loaded = this._loadedBytes;
      event.total = this._totalBytes;
      this.dispatchEvent(event);
      return void 0;
    };

    XMLHttpRequest.prototype._setError = function() {
      this._request = null;
      this._response = null;
      this._responseHeaders = null;
      this._responseParts = null;
      return void 0;
    };

    XMLHttpRequest.prototype._parseUrl = function(urlString) {
      var absoluteUrlString, index, password, user, xhrUrl;
      if (this.nodejsBaseUrl === null) {
        absoluteUrlString = urlString;
      } else {
        absoluteUrlString = url.resolve(this.nodejsBaseUrl, urlString);
      }
      xhrUrl = url.parse(absoluteUrlString, false, true);
      xhrUrl.hash = null;
      if (xhrUrl.auth && ((typeof user !== "undefined" && user !== null) || (typeof password !== "undefined" && password !== null))) {
        index = xhrUrl.auth.indexOf(':');
        if (index === -1) {
          if (!user) {
            user = xhrUrl.auth;
          }
        } else {
          if (!user) {
            user = xhrUrl.substring(0, index);
          }
          if (!password) {
            password = xhrUrl.substring(index + 1);
          }
        }
      }
      if (user || password) {
        xhrUrl.auth = user + ":" + password;
      }
      return xhrUrl;
    };

    XMLHttpRequest.prototype._parseResponseHeaders = function(response) {
      var loweredName, name, ref, value;
      this._responseHeaders = {};
      ref = response.headers;
      for (name in ref) {
        value = ref[name];
        loweredName = name.toLowerCase();
        if (this._privateHeaders[loweredName]) {
          continue;
        }
        if (this._mimeOverride !== null && loweredName === 'content-type') {
          value = this._mimeOverride;
        }
        this._responseHeaders[loweredName] = value;
      }
      if (this._mimeOverride !== null && !('content-type' in this._responseHeaders)) {
        this._responseHeaders['content-type'] = this._mimeOverride;
      }
      return void 0;
    };

    XMLHttpRequest.prototype._parseResponse = function() {
      var arrayBuffer, buffer, i, j, jsonError, ref, view;
      if (Buffer.concat) {
        buffer = Buffer.concat(this._responseParts);
      } else {
        buffer = this._concatBuffers(this._responseParts);
      }
      this._responseParts = null;
      switch (this.responseType) {
        case 'text':
          this._parseTextResponse(buffer);
          break;
        case 'json':
          this.responseText = null;
          try {
            this.response = JSON.parse(buffer.toString('utf-8'));
          } catch (error1) {
            jsonError = error1;
            this.response = null;
          }
          break;
        case 'buffer':
          this.responseText = null;
          this.response = buffer;
          break;
        case 'arraybuffer':
          this.responseText = null;
          arrayBuffer = new ArrayBuffer(buffer.length);
          view = new Uint8Array(arrayBuffer);
          for (i = j = 0, ref = buffer.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            view[i] = buffer[i];
          }
          this.response = arrayBuffer;
          break;
        default:
          this._parseTextResponse(buffer);
      }
      return void 0;
    };

    XMLHttpRequest.prototype._parseTextResponse = function(buffer) {
      var e;
      try {
        this.responseText = buffer.toString(this._parseResponseEncoding());
      } catch (error1) {
        e = error1;
        this.responseText = buffer.toString('binary');
      }
      this.response = this.responseText;
      return void 0;
    };

    XMLHttpRequest.prototype._parseResponseEncoding = function() {
      var contentType, encoding, match;
      encoding = null;
      if (contentType = this._responseHeaders['content-type']) {
        if (match = /\;\s*charset\=(.*)$/.exec(contentType)) {
          return match[1];
        }
      }
      return 'utf-8';
    };

    XMLHttpRequest.prototype._concatBuffers = function(buffers) {
      var buffer, j, k, len, len1, length, target;
      if (buffers.length === 0) {
        return new Buffer(0);
      }
      if (buffers.length === 1) {
        return buffers[0];
      }
      length = 0;
      for (j = 0, len = buffers.length; j < len; j++) {
        buffer = buffers[j];
        length += buffer.length;
      }
      target = new Buffer(length);
      length = 0;
      for (k = 0, len1 = buffers.length; k < len1; k++) {
        buffer = buffers[k];
        buffer.copy(target, length);
        length += buffer.length;
      }
      return target;
    };

    return XMLHttpRequest;

  })(XMLHttpRequestEventTarget);

  module.exports = XMLHttpRequest;

  XMLHttpRequest.XMLHttpRequest = XMLHttpRequest;

  SecurityError = (function(superClass) {
    extend(SecurityError, superClass);

    function SecurityError() {
      SecurityError.__super__.constructor.apply(this, arguments);
    }

    return SecurityError;

  })(Error);

  XMLHttpRequest.SecurityError = SecurityError;

  InvalidStateError = (function(superClass) {
    extend(InvalidStateError, superClass);

    function InvalidStateError() {
      InvalidStateError.__super__.constructor.apply(this, arguments);
    }

    return InvalidStateError;

  })(Error);

  InvalidStateError = (function(superClass) {
    extend(InvalidStateError, superClass);

    function InvalidStateError() {
      return InvalidStateError.__super__.constructor.apply(this, arguments);
    }

    return InvalidStateError;

  })(Error);

  XMLHttpRequest.InvalidStateError = InvalidStateError;

  NetworkError = (function(superClass) {
    extend(NetworkError, superClass);

    function NetworkError() {
      NetworkError.__super__.constructor.apply(this, arguments);
    }

    return NetworkError;

  })(Error);

  XMLHttpRequest.SyntaxError = SyntaxError;

  SyntaxError = (function(superClass) {
    extend(SyntaxError, superClass);

    function SyntaxError() {
      SyntaxError.__super__.constructor.apply(this, arguments);
    }

    return SyntaxError;

  })(Error);

  ProgressEvent = (function() {
    function ProgressEvent(type) {
      this.type = type;
      this.target = null;
      this.currentTarget = null;
      this.lengthComputable = false;
      this.loaded = 0;
      this.total = 0;
    }

    ProgressEvent.prototype.bubbles = false;

    ProgressEvent.prototype.cancelable = false;

    ProgressEvent.prototype.target = null;

    ProgressEvent.prototype.loaded = null;

    ProgressEvent.prototype.lengthComputable = null;

    ProgressEvent.prototype.total = null;

    return ProgressEvent;

  })();

  XMLHttpRequest.ProgressEvent = ProgressEvent;

  XMLHttpRequestUpload = (function(superClass) {
    extend(XMLHttpRequestUpload, superClass);

    function XMLHttpRequestUpload(request) {
      XMLHttpRequestUpload.__super__.constructor.call(this);
      this._request = request;
      this._reset();
    }

    XMLHttpRequestUpload.prototype._reset = function() {
      this._contentType = null;
      this._body = null;
      return void 0;
    };

    XMLHttpRequestUpload.prototype._setData = function(data) {
      var body, i, j, k, offset, ref, ref1, view;
      if (typeof data === 'undefined' || data === null) {
        return;
      }
      if (typeof data === 'string') {
        if (data.length !== 0) {
          this._contentType = 'text/plain;charset=UTF-8';
        }
        this._body = new Buffer(data, 'utf8');
      } else if (Buffer.isBuffer(data)) {
        this._body = data;
      } else if (data instanceof ArrayBuffer) {
        body = new Buffer(data.byteLength);
        view = new Uint8Array(data);
        for (i = j = 0, ref = data.byteLength; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          body[i] = view[i];
        }
        this._body = body;
      } else if (data.buffer && data.buffer instanceof ArrayBuffer) {
        body = new Buffer(data.byteLength);
        offset = data.byteOffset;
        view = new Uint8Array(data.buffer);
        for (i = k = 0, ref1 = data.byteLength; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
          body[i] = view[i + offset];
        }
        this._body = body;
      } else {
        throw new Error("Unsupported send() data " + data);
      }
      return void 0;
    };

    XMLHttpRequestUpload.prototype._finalizeHeaders = function(headers, loweredHeaders) {
      if (this._contentType) {
        if (!('content-type' in loweredHeaders)) {
          headers['Content-Type'] = this._contentType;
        }
      }
      if (this._body) {
        headers['Content-Length'] = this._body.length.toString();
      }
      return void 0;
    };

    XMLHttpRequestUpload.prototype._startUpload = function(request) {
      if (this._body) {
        request.write(this._body);
      }
      request.end();
      return void 0;
    };

    return XMLHttpRequestUpload;

  })(XMLHttpRequestEventTarget);

  XMLHttpRequest.XMLHttpRequestUpload = XMLHttpRequestUpload;

}).call(this);


/***/ }),

/***/ 6583:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Handlers = void 0;
    var Handlers = /** @class */ (function () {
        function Handlers() {
        }
        Handlers.HANDLER_GET_APPOINTMENT_BY_ID = 100;
        Handlers.HANDLER_GET_APPOINTMENT_BY_ID_METHOD = "appointment.get_appointment_by_id";
        Handlers.HANDLER_SAVE_APPOINTMENT = 101;
        Handlers.HANDLER_SAVE_APPOINTMENT_METHOD = "appointment.save_appointment";
        Handlers.HANDLER_GET_PATIENT_APPOINTMENTS = 102;
        Handlers.HANDLER_GET_PATIENT_APPOINTMENTS_METHOD = "appointment.get_patient_appointments";
        Handlers.HANDLER_GET_APPOINTMENTS = 103;
        Handlers.HANDLER_GET_APPOINTMENTS_METHOD = "appointment.get_appointments";
        Handlers.HANDLER_GET_APPOINTMENTS_COUNT = 104;
        Handlers.HANDLER_GET_APPOINTMENTS_COUNT_METHOD = "appointment.count";
        Handlers.HANDLER_GET_PATIENT_APPOINTMENTS_COUNT = 105;
        Handlers.HANDLER_GET_PATIENT_APPOINTMENTS_COUNT_METHOD = "appointment.patient_appointments_count";
        Handlers.HANDLER_GET_APPOINTMENT_RESULT_BY_ID = 200;
        Handlers.HANDLER_GET_APPOINTMENT_RESULT_BY_ID_METHOD = "appointment_result.get_appointment_result_by_id";
        Handlers.HANDLER_GET_PATIENT_APPOINTMENT_RESULTS = 201;
        Handlers.HANDLER_GET_PATIENT_APPOINTMENT_RESULTS_METHOD = "appointment_result.get_patient_appointment_results";
        Handlers.HANDLER_GET_APPOINTMENT_RESULTS = 202;
        Handlers.HANDLER_GET_APPOINTMENT_RESULTS_METHOD = "appointment_result.get_appointment_results";
        Handlers.HANDLER_GET_APPOINTMENT_RESULTS_COUNT = 203;
        Handlers.HANDLER_GET_APPOINTMENT_RESULTS_COUNT_METHOD = "appointment_result.count";
        Handlers.HANDLER_GET_PATIENT_APPOINTMENT_RESULTS_COUNT = 204;
        Handlers.HANDLER_GET_PATIENT_APPOINTMENT_RESULTS_COUNT_METHOD = "appointment_result.patient_appointment_results_count";
        Handlers.HANDLER_SEARCH_APPOINTMENT_RESULTS = 205;
        Handlers.HANDLER_SEARCH_APPOINTMENT_RESULTS_METHOD = "appointment_result.search_appointment_results";
        Handlers.HANDLER_SEARCH_APPOINTMENT_RESULTS_COUNT = 206;
        Handlers.HANDLER_SEARCH_APPOINTMENT_RESULTS_COUNT_METHOD = "appointment_result.search_appointment_results_count";
        Handlers.HANDLER_GET_PRESCRIPTION_BY_ID = 300;
        Handlers.HANDLER_GET_PRESCRIPTION_BY_ID_METHOD = "prescription.get_prescription_by_id";
        Handlers.HANDLER_GET_PATIENT_PRESCRIPTIONS = 301;
        Handlers.HANDLER_GET_PATIENT_PRESCRIPTIONS_METHOD = "prescription.get_patient_prescriptions";
        Handlers.HANDLER_GET_PRESCRIPTIONS = 302;
        Handlers.HANDLER_GET_PRESCRIPTIONS_METHOD = "prescription.get_prescriptions";
        Handlers.HANDLER_GET_PRESCRIPTIONS_COUNT = 303;
        Handlers.HANDLER_GET_PRESCRIPTIONS_COUNT_METHOD = "prescription.count";
        Handlers.HANDLER_GET_PATIENT_PRESCRIPTIONS_COUNT = 304;
        Handlers.HANDLER_GET_PATIENT_PRESCRIPTIONS_COUNT_METHOD = "prescription.patient_prescriptions_count";
        Handlers.HANDLER_SEARCH_PRESCRIPTIONS = 305;
        Handlers.HANDLER_SEARCH_PRESCRIPTIONS_METHOD = "prescription.search_prescriptions";
        Handlers.HANDLER_SEARCH_PRESCRIPTIONS_COUNT = 306;
        Handlers.HANDLER_SEARCH_PRESCRIPTIONS_COUNT_METHOD = "prescription.search_prescriptions_count";
        Handlers.HANDLER_GET_DIAGNOSTIC_REPORT_BY_ID = 400;
        Handlers.HANDLER_GET_DIAGNOSTIC_REPORT_BY_ID_METHOD = "diagnostic_report.get_diagnostic_report_by_id";
        Handlers.HANDLER_GET_PATIENT_DIAGNOSTIC_REPORTS = 401;
        Handlers.HANDLER_GET_PATIENT_DIAGNOSTIC_REPORTS_METHOD = "diagnostic_report.get_patient_diagnostic_reports";
        Handlers.HANDLER_GET_DIAGNOSTIC_REPORTS = 402;
        Handlers.HANDLER_GET_DIAGNOSTIC_REPORTS_METHOD = "diagnostic_report.get_diagnostic_reports";
        Handlers.HANDLER_GET_DIAGNOSTIC_REPORTS_COUNT = 403;
        Handlers.HANDLER_GET_DIAGNOSTIC_REPORTS_COUNT_METHOD = "diagnostic_report.count";
        Handlers.HANDLER_GET_PATIENT_DIAGNOSTIC_REPORTS_COUNT = 404;
        Handlers.HANDLER_GET_PATIENT_DIAGNOSTIC_REPORTS_COUNT_METHOD = "diagnostic_report.patient_diagnostic_reports_count";
        Handlers.HANDLER_SEACH_DIAGNOSTIC_REPORTS = 405;
        Handlers.HANDLER_SEARCH_DIAGNOSTIC_REPORTS_METHOD = "diagnostic_report.search_diagnostic_reports";
        Handlers.HANDLER_SEARCH_DIAGNOSTIC_REPORTS_COUNT = 406;
        Handlers.HANDLER_SEARCH_DIAGNOSTIC_REPORTS_COUNT_METHOD = "diagnostic_report.search_diagnostic_reports_count";
        Handlers.HANDLER_SAVE_AUTH_INFO = 500;
        Handlers.HANDLER_SAVE_AUTH_INFO_METHOD = "embedded_storage.save_auth_info";
        Handlers.HANDLER_SAVE_EXCHANGE_TOKEN = 501;
        Handlers.HANDLER_SAVE_EXCHANGE_TOKEN_METHOD = "embedded_storage.save_exchange_token";
        Handlers.HANDLER_AUTHENTICATE = 502;
        Handlers.HANDLER_AUTHENTICATE_METHOD = "embedded_storage.authenticate";
        Handlers.HANDLER_REMOVE_AUTH_INFO = 503;
        Handlers.HANDLER_REMOVE_AUTH_INFO_METHOD = "embedded_storage.remove_auth_info";
        Handlers.HANDLER_REMOVE_AUTHENTICATION = 504;
        Handlers.HANDLER_REMOVE_AUTHENTICATION_METHOD = "embedded_storage.remove_authentication";
        Handlers.HANDLER_GET_BUSINESS_INFO = 505;
        Handlers.HANDLER_GET_BUSINESS_INFO_METHOD = "embedded_storage.get_business_info";
        Handlers.HANDLER_GET_PATIENT = 600;
        Handlers.HANDLER_GET_PATIENT_METHOD = "patient.get_patient";
        Handlers.HANDLER_GET_PATIENT_BY_ID_METHOD = "patient.get_patient_by_id";
        Handlers.HANDLER_GET_PATIENTS_METHOD = "patient.get_patients";
        Handlers.HANDLER_GET_PATIENTS_COUNT_METHOD = "patient.count";
        return Handlers;
    }());
    exports.Handlers = Handlers;
});


/***/ }),

/***/ 9490:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./l10n/index", "./Formatter", "../types/index", "../types/ObservationType", "../types/DiscountType"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.FieldsFormatter = exports.buildFieldArray = exports.FieldItemModeMeta = exports.FieldMeta = exports.Field = exports.FieldItemMode = exports.FieldStatusColor = exports.FieldType = void 0;
    var index_1 = __nccwpck_require__(3509);
    var Formatter_1 = __nccwpck_require__(8315);
    var index_2 = __nccwpck_require__(2464);
    var ObservationType_1 = __nccwpck_require__(6295);
    var DiscountType_1 = __nccwpck_require__(9146);
    var FieldType;
    (function (FieldType) {
        FieldType["Text"] = "text";
        FieldType["Number"] = "number";
        FieldType["List"] = "list";
        FieldType["Object"] = "object";
        FieldType["Date"] = "date";
        FieldType["DateTime"] = "dateTime";
        FieldType["DatePeriod"] = "datePeriod";
        FieldType["Email"] = "email";
        FieldType["Price"] = "price";
        FieldType["Status"] = "status";
        FieldType["Paragraphs"] = "paragraphs";
        FieldType["ObjectList"] = "objectList";
        FieldType["MediaList"] = "mediaList";
        FieldType["AttachmentList"] = "attachmentList";
        FieldType["Hidden"] = "hidden";
    })(FieldType = exports.FieldType || (exports.FieldType = {}));
    var FieldStatusColor;
    (function (FieldStatusColor) {
        FieldStatusColor["Red"] = "red";
        FieldStatusColor["Yellow"] = "yellow";
        FieldStatusColor["Blue"] = "blue";
        FieldStatusColor["Green"] = "green";
    })(FieldStatusColor = exports.FieldStatusColor || (exports.FieldStatusColor = {}));
    var FieldItemMode;
    (function (FieldItemMode) {
        FieldItemMode["FirstLine"] = "firstLine";
        FieldItemMode["SecondLine"] = "secondLine";
        FieldItemMode["ThirdLine"] = "thirdLine";
        FieldItemMode["Hidden"] = "hidden";
        FieldItemMode["Picture"] = "picture";
    })(FieldItemMode = exports.FieldItemMode || (exports.FieldItemMode = {}));
    var Field = /** @class */ (function () {
        function Field() {
        }
        return Field;
    }());
    exports.Field = Field;
    /**
     * Meta data about field representation.
     */
    var FieldMeta = /** @class */ (function () {
        function FieldMeta() {
        }
        return FieldMeta;
    }());
    exports.FieldMeta = FieldMeta;
    var FieldItemModeMeta = /** @class */ (function () {
        function FieldItemModeMeta() {
        }
        return FieldItemModeMeta;
    }());
    exports.FieldItemModeMeta = FieldItemModeMeta;
    function buildFieldArray(data, meta, t, priorKeys, itemModeMeta) {
        var _a, _b, _c;
        if (priorKeys === void 0) { priorKeys = []; }
        if (itemModeMeta === void 0) { itemModeMeta = null; }
        var keys = priorKeys
            .concat(Object.keys(meta))
            .filter(function (k, i, self) { return self.indexOf(k) === i; }); // uniq keys
        if (t == null) {
            t = {};
            for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                var k = keys_1[_i];
                t[k] = k;
            }
        }
        var ans = [];
        for (var _d = 0, keys_2 = keys; _d < keys_2.length; _d++) {
            var key = keys_2[_d];
            if (meta[key].composite)
                ans.push({
                    key: key,
                    title: t[key],
                    type: (_a = meta[key]) === null || _a === void 0 ? void 0 : _a.type,
                    hint: t[key + "Hint"],
                    originValue: data[key],
                    value: meta[key].format(data),
                });
            else
                ans.push({
                    key: key,
                    title: t[key],
                    type: (_b = meta[key]) === null || _b === void 0 ? void 0 : _b.type,
                    hint: t[key + "Hint"],
                    originValue: data[key],
                    value: ((_c = meta[key]) === null || _c === void 0 ? void 0 : _c.format) ? meta[key].format(data[key]) : data[key],
                });
        }
        if (itemModeMeta != null) {
            ans.push({
                key: "__itemModeFirstLine__",
                itemMode: FieldItemMode.FirstLine,
                title: "itemModeFirstLine",
                type: FieldType.Hidden,
                hint: "",
                originValue: data,
                value: itemModeMeta.firstLine(data),
            });
            ans.push({
                key: "__itemModeSecondLine__",
                itemMode: FieldItemMode.SecondLine,
                title: "itemModeSecondLine",
                type: FieldType.Hidden,
                hint: "",
                originValue: data,
                value: itemModeMeta.secondLine(data),
            });
            if (itemModeMeta.thirdLine != null) {
                ans.push({
                    key: "__itemModeThirdLine__",
                    itemMode: FieldItemMode.ThirdLine,
                    title: "itemModeThirdLine",
                    type: FieldType.Hidden,
                    hint: "",
                    originValue: data,
                    value: itemModeMeta.thirdLine(data),
                });
            }
        }
        return ans;
    }
    exports.buildFieldArray = buildFieldArray;
    var FieldsFormatter = /** @class */ (function () {
        function FieldsFormatter(localize, dateFormat) {
            if (dateFormat === void 0) { dateFormat = Formatter_1.dateISOFormat; }
            this._localize = localize;
            this._dateFormat = dateFormat;
        }
        FieldsFormatter.create = function (locale, dateFormat) {
            if (dateFormat === void 0) { dateFormat = Formatter_1.dateISOFormat; }
            return new FieldsFormatter(index_1.default.getByLocaleCode(locale), dateFormat);
        };
        // ----------------------------------
        // Common field definitions
        FieldsFormatter.prototype.dateField = function (opts) {
            var this_ = this;
            var format = function (intl, val) {
                if (typeof val == "string")
                    val = new Date(Date.parse(val));
                var d = val;
                if (d.getFullYear() === 0 || d.getFullYear() === 1)
                    return "не определено";
                return intl.format(d);
            };
            return {
                type: (opts === null || opts === void 0 ? void 0 : opts.dateOnly) ? FieldType.Date : FieldType.DateTime,
                format: (opts === null || opts === void 0 ? void 0 : opts.dateOnly) ? function (val) { return format(new Intl.DateTimeFormat("ru"), val); }
                    : function (val) {
                        return format(new Intl.DateTimeFormat("ru", {
                            year: "numeric",
                            month: "numeric",
                            day: "numeric",
                            hour: "numeric",
                            minute: "numeric",
                        }), val);
                    },
            };
        };
        FieldsFormatter.prototype.textField = function () {
            return {
                type: FieldType.Text,
                format: function (val) { return val; },
            };
        };
        FieldsFormatter.prototype.numberField = function () {
            return {
                type: FieldType.Number,
                format: function (val) { return val; },
            };
        };
        // ----------------------------------
        // Specific field definitions
        FieldsFormatter.prototype.businessField = function () {
            return {
                type: FieldType.Object,
                format: this.business.bind(this),
            };
        };
        FieldsFormatter.prototype.doctorField = function () {
            return { type: FieldType.Text, format: this.doctor.bind(this) };
        };
        FieldsFormatter.prototype.doctorsField = function () {
            return { type: FieldType.List, format: this.doctors.bind(this) };
        };
        FieldsFormatter.prototype.anamnesisField = function () {
            return {
                type: FieldType.List,
                format: this.anamnesis.bind(this),
            };
        };
        FieldsFormatter.prototype.medicalExaminationResultField = function () {
            return {
                type: FieldType.Paragraphs,
                format: this.medicalExaminationResult.bind(this),
            };
        };
        FieldsFormatter.prototype.diagnosisField = function () {
            return {
                type: FieldType.Object,
                format: this.diagnosis.bind(this),
            };
        };
        FieldsFormatter.prototype.FormattedFieldList = function (format) {
            return {
                type: FieldType.Object,
                format: format,
            };
        };
        FieldsFormatter.prototype.idField = function () {
            return {
                type: FieldType.Text,
                format: function (val) { return val; },
            };
        };
        FieldsFormatter.prototype.activeField = function () {
            var _this = this;
            return {
                type: FieldType.Text,
                format: function (val) {
                    return val
                        ? _this._localize["ActiveStatus"]["active"]
                        : _this._localize["ActiveStatus"]["disactive"];
                },
            };
        };
        FieldsFormatter.prototype.statusField = function () {
            return {
                type: FieldType.Status,
                format: function (val) {
                    return ({
                        color: "green",
                        text: "Active",
                    });
                },
            };
        };
        FieldsFormatter.prototype.patientField = function () {
            return {
                type: FieldType.Object,
                format: this.patientInfo.bind(this),
            };
        };
        FieldsFormatter.prototype.phonesField = function () {
            return {
                type: FieldType.List,
                format: function (val) { return val; },
            };
        };
        FieldsFormatter.prototype.emailField = function () {
            return {
                type: FieldType.Email,
                format: function (val) { return val; },
            };
        };
        FieldsFormatter.prototype.genderField = function () {
            var t = this._localize["Gender"];
            return {
                type: FieldType.Text,
                format: function (val) { return t[val]; },
            };
        };
        FieldsFormatter.prototype.paragrathesField = function () {
            return {
                type: FieldType.Paragraphs,
                format: function (val) { return val; },
            };
        };
        FieldsFormatter.prototype.diagnosisTypeField = function () {
            var _this = this;
            return {
                type: FieldType.Text,
                format: function (val) {
                    return val == ObservationType_1.ObservationType.LaboratoryTest
                        ? _this._localize["DiagnosisType"]["laboratoryTest"]
                        : val == ObservationType_1.ObservationType.Observation
                            ? _this._localize["DiagnosisType"]["observation"]
                            : _this._localize["DiagnosisType"]["unknown"] + " (#" + val + ")";
                },
            };
        };
        FieldsFormatter.prototype.diagnosisCategoryField = function () {
            return {
                type: FieldType.Text,
                format: function (val) { return val; },
            };
        };
        FieldsFormatter.prototype.periodField = function (opts) {
            var _this = this;
            return {
                type: FieldType.DatePeriod,
                format: function (val) {
                    var _a, _b;
                    var period = val;
                    var textPeriod = val;
                    return {
                        from: _this.dateField(opts).format(period.begin),
                        fromIsZero: period.begin === null || typeof period.begin == "string"
                            ? textPeriod.begin.substr(0, 1) == "0"
                            : ((_a = period.begin) === null || _a === void 0 ? void 0 : _a.getTime()) === 0,
                        to: _this.dateField(opts).format(period.end),
                        toIsZero: period.end === null || typeof period.end == "string"
                            ? textPeriod.end.substr(0, 1) == "0"
                            : ((_b = period.end) === null || _b === void 0 ? void 0 : _b.getTime()) === 0,
                    };
                },
            };
        };
        FieldsFormatter.prototype.appointmentResultsField = function () {
            var _this = this;
            return {
                type: FieldType.ObjectList,
                format: function (val) {
                    return val.map(_this.appointmentResult.bind(_this));
                },
            };
        };
        FieldsFormatter.prototype.appointmentResultField = function () {
            var this_ = this.textField;
            return {
                type: FieldType.Object,
                format: this.appointmentResult.bind(this_),
            };
        };
        FieldsFormatter.prototype.servicesField = function () {
            var this_ = this;
            return {
                type: FieldType.List,
                format: function (val) {
                    return val.map(function (item) { return item.name; });
                },
            };
        };
        FieldsFormatter.prototype.priceField = function () {
            return {
                type: FieldType.Object,
                format: this.clientPrice.bind(this),
            };
        };
        FieldsFormatter.prototype.currencyField = function () {
            var t = this._localize["Currency"];
            return {
                type: FieldType.Text,
                format: function (val) { return t[val]; },
            };
        };
        FieldsFormatter.prototype.priceFormat = function (val, cur) {
            var cp = this._localize["currencyPosition"];
            var t = this._localize["Currency"];
            return cp == "left" ? t[cur] + "" + val : "" + val + t[cur];
        };
        FieldsFormatter.prototype.plural = function (n, one, many) {
            return n == 1 ? "" + n + " " + one : "" + n + " " + many;
        };
        FieldsFormatter.prototype.durationFormat = function (val) {
            var t = this._localize["Duration"];
            var fm = val;
            if (fm == 0)
                return "";
            var h = this.plural(fm / 60, t["hour"], t["hours"]);
            var m = this.plural(fm % 60, t["minute"], t["minutes"]);
            return h + " " + m;
        };
        FieldsFormatter.prototype.durationField = function () {
            var this_ = this;
            return {
                type: FieldType.Text,
                format: function (val) { return this_.durationFormat(val); },
            };
        };
        FieldsFormatter.prototype.mediasField = function () {
            return {
                type: FieldType.MediaList,
                format: function (val) {
                    if (!val || val.length == 0) {
                        val = [
                            "https://images.unsplash.com/photo-1517841905240-472988babdf9?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyM3x8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                            "https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyNHx8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                            "https://images.unsplash.com/photo-1519345182560-3f2917c472ef?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyNXx8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                            "https://images.unsplash.com/photo-1509460913899-515f1df34fea?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyNnx8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                            "https://images.unsplash.com/photo-1570158268183-d296b2892211?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyN3x8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                            "https://images.unsplash.com/photo-1515023115689-589c33041d3c?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyOHx8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                            "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyOXx8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                            "https://images.unsplash.com/photo-1527203561188-dae1bc1a417f?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwzMHx8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                        ];
                    }
                    return val;
                },
            };
        };
        FieldsFormatter.prototype.attachmentsField = function () {
            return {
                type: FieldType.AttachmentList,
                format: function (val) {
                    if (!val || val.length == 0) {
                        val = [
                            "https://images.unsplash.com/photo-1517841905240-472988babdf9?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyM3x8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                            "https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyNHx8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                            "https://images.unsplash.com/photo-1519345182560-3f2917c472ef?ixid=MnwyNDUwMjR8MHwxfHNlYXJjaHwyNXx8cG9ydHJhaXR8ZW58MHx8fHwxNjMxMjg1OTkx&ixlib=rb-1.2.1&cs=tinysrgb&fm=jpg&fit=facearea&facepad=4&q=60&w=256&h=256",
                        ];
                    }
                    return val;
                },
            };
        };
        // --------------------------------
        // public interface methods
        FieldsFormatter.prototype.business = function (b) {
            if (b == null)
                return [];
            var meta = {
                id: this.idField(),
                name: this.textField(),
                location: this.textField(),
            };
            var itemModeMeta = {
                firstLine: function (b) {
                    return b.name;
                },
                secondLine: function (b) {
                    return b.location.split(",")[0];
                },
            };
            return buildFieldArray(b, meta, this._localize["business"], [], itemModeMeta);
        };
        FieldsFormatter.prototype.clientPrice = function (p) {
            if (p == null)
                return [];
            var t = this._localize["Currency"];
            var this_ = this;
            var meta = {
                currency: this.currencyField(),
                originValue: this.numberField(),
                discountValue: this.numberField(),
                value: this.numberField(),
                discount: {
                    type: FieldType.Text,
                    format: function (val) {
                        var d = val;
                        return d.discountType == DiscountType_1.DiscountType.Percent
                            ? d.discountPercent + "%"
                            : this_.priceFormat(d.discountValue, index_2.Currency.Rur);
                    },
                },
            };
            return buildFieldArray(p, meta, this._localize["ClientPrice"]);
        };
        FieldsFormatter.prototype.clientPriceText = function (p) {
            return this.priceFormat(p.value, p.currency);
        };
        FieldsFormatter.prototype.service = function (s) {
            var meta = {
                id: this.idField(),
                name: this.textField(),
                price: this.priceField(),
                duration: this.durationField(),
            };
            var this_ = this;
            var itemModeMeta = {
                firstLine: function (s) { return s.name; },
                secondLine: function (s) {
                    var d = this_.duration(s.duration);
                    return ((d ? d + " " : "") + (s.price ? this_.clientPriceText(s.price) : ""));
                },
            };
            return buildFieldArray(s, meta, this._localize["service"], [], itemModeMeta);
        };
        FieldsFormatter.prototype.fullPatientNameField = function () {
            var this_ = this;
            return {
                type: FieldType.Text,
                composite: true,
                format: function (val) {
                    return (val.name +
                        (val.middleName ? " " + val.middleName : "") +
                        " " +
                        val.surname);
                },
            };
        };
        FieldsFormatter.prototype.patientMessage = function (p) {
            var meta = {
                id: this.idField(),
                fullName: this.fullPatientNameField(),
                phones: this.phonesField(),
                email: this.emailField(),
                gender: this.genderField(),
                birthdate: this.dateField({ dateOnly: true }),
                address: this.textField(),
                medcardNumber: this.textField(),
            };
            var itemModeMeta = {
                firstLine: function (p) {
                    return p.name + " " + p.surname;
                },
                secondLine: function (p) {
                    return p.medcardNumber ? "#" + p.medcardNumber : "";
                },
                thirdLine: function (p) {
                    return "";
                    return p.phones.join(", ");
                },
            };
            return buildFieldArray(p, meta, this._localize["patient"], [], itemModeMeta);
        };
        FieldsFormatter.prototype.patientInfo = function (p) {
            var meta = {
                id: this.idField(),
                surname: this.textField(),
                middleName: this.textField(),
                name: this.textField(),
                phones: this.phonesField(),
                email: this.emailField(),
                gender: this.genderField(),
                birthdate: this.dateField({ dateOnly: true }),
                medcardNumber: this.textField(),
                descriptionText: this.paragrathesField(),
            };
            var itemModeMeta = {
                firstLine: function (p) {
                    return p.name + " " + p.surname;
                },
                secondLine: function (p) {
                    return p.medcardNumber ? "#" + p.medcardNumber : "";
                },
                thirdLine: function (p) {
                    return "";
                    return p.phones.join(", ");
                },
            };
            return buildFieldArray(p, meta, this._localize["patient"], [], itemModeMeta);
        };
        FieldsFormatter.prototype.appointment = function (a) {
            var meta = {
                business: this.businessField(),
                created: this.dateField(),
                start: this.dateField(),
                doctor: this.doctorField(),
            };
            return buildFieldArray(a, meta, this._localize["appointment"]);
        };
        FieldsFormatter.prototype.appointmentResult = function (ar) {
            var meta = {
                business: this.businessField(),
                created: this.dateField(),
                start: this.dateField(),
                doctor: this.doctorField(),
                anamnesis: this.anamnesisField(),
                medicalExaminationResult: this.medicalExaminationResultField(),
                diagnosis: this.diagnosisField(),
                recommendations: this.FormattedFieldList(this.procedures.bind(this)),
                scheduledProcedures: this.FormattedFieldList(this.procedures.bind(this)),
                prescriptions: this.FormattedFieldList(this.prescriptions.bind(this)),
            };
            return buildFieldArray(ar, meta, this._localize["appointmentResult"]);
        };
        FieldsFormatter.prototype.diagnosis = function (d) {
            if (d == null || d.length === 0)
                return [];
            var t = this._localize;
            return d.map(function (v) { return ({
                key: "",
                title: "",
                hint: "",
                type: FieldType.Text,
                originValue: v,
                value: "cd10 " + v.cd10 + "\n" + v.description + "\n\n",
            }); });
        };
        FieldsFormatter.prototype.procedure = function (p) {
            throw new Error("Method not implemented.");
        };
        FieldsFormatter.prototype.procedures = function (p) {
            if (p == null || p.length == 0)
                return [];
            var this_ = this;
            return p.reduce(function (ret, item, i) { return ret.concat(this_.procedure(item)); }, []);
        };
        FieldsFormatter.prototype.prescriptions = function (p) {
            var _this = this;
            if (p == null)
                return "";
            return "\n" + p.map(function (item) { return _this.prescription(item); }).join("\n");
        };
        FieldsFormatter.prototype.medicationsField = function () {
            var this_ = this;
            return {
                type: FieldType.ObjectList,
                format: function (val) {
                    var meds = val;
                    return meds.map(function (m) { return this_.medication(m); });
                },
            };
        };
        FieldsFormatter.prototype.prescription = function (p) {
            var meta = {
                created: this.dateField(),
                recorderDoctor: this.doctorField(),
                validityPeriod: this.periodField(),
                dosageText: {
                    type: FieldType.Paragraphs,
                    format: function (val) {
                        if (!val)
                            return [];
                        var str = val;
                        return str.split("\r\n");
                    },
                },
                medications: this.medicationsField(),
                reasonText: this.textField(),
                numberOfRepeats: this.numberField(),
            };
            return buildFieldArray(p, meta, this._localize["Prescription"]);
        };
        FieldsFormatter.prototype.medication = function (m) {
            var this_ = this;
            var meta = {};
            var itemModeMeta = {
                firstLine: function (m) {
                    return m.name + " " + m.itemSize;
                },
                secondLine: function (m) {
                    return m.code + " " + m.codeTable;
                },
            };
            return buildFieldArray(m, meta, this._localize["Medication"], [], itemModeMeta);
        };
        FieldsFormatter.prototype.observation = function (o) {
            var meta = {};
            var this_ = this;
            var itemModeMeta = {
                firstLine: function (o) {
                    return o.observationKey;
                },
                secondLine: function (o) {
                    return (
                    // this_._dateFormat(o.issuedDate) +
                    " "
                    // + this_.doctor(o.performerDoctor)
                    );
                },
                thirdLine: function (o) {
                    return Formatter_1.paragrathes(o.interpretation);
                },
            };
            return buildFieldArray(o, meta, this._localize["Observation"], [], itemModeMeta);
        };
        FieldsFormatter.prototype.observationsField = function () {
            var this_ = this;
            return {
                type: FieldType.ObjectList,
                format: function (val) {
                    var obs = val;
                    return obs.map(function (o) { return this_.observation(o); });
                },
            };
        };
        FieldsFormatter.prototype.diagnosticReport = function (dr) {
            var meta = {
                id: this.idField(),
                active: this.activeField(),
                business: this.businessField(),
                patient: this.patientField(),
                status: this.statusField(),
                type: this.diagnosisTypeField(),
                category: this.diagnosisCategoryField(),
                effectivePeriod: this.periodField({ dateOnly: true }),
                issuedDate: this.dateField({ dateOnly: true }),
                result: this.observationsField(),
                services: this.servicesField(),
                resultInterpreter: this.doctorsField(),
                resultInterpretation: this.paragrathesField(),
                imagineMedia: this.mediasField(),
                attachments: this.attachmentsField(),
            };
            return buildFieldArray(dr, meta, this._localize["DiagnosticReport"]);
        };
        // --------------------------------
        // private utility methods
        FieldsFormatter.prototype.anamnesis = function (a) {
            return a;
        };
        FieldsFormatter.prototype.duration = function (n) {
            return this.durationFormat(n);
        };
        FieldsFormatter.prototype.doctor = function (d) {
            if (d == null)
                return "";
            return d.name + " " + d.surname;
        };
        FieldsFormatter.prototype.doctors = function (doctors) {
            var this_ = this;
            return doctors.map(function (d) { return this_.doctor(d); });
        };
        FieldsFormatter.prototype.yesNo = function (b) {
            return b ? this._localize["YES"] : this._localize["NO"];
        };
        FieldsFormatter.prototype.medicalExaminationResult = function (ar) {
            if (ar == null)
                return [];
            ar = ar.map(function (line) {
                var m = line.match(/([^:]*):(.*)/);
                if (m) {
                    m[1] = Formatter_1.trim(m[1]);
                    return (m[1] ? m[1] + ": " : "") + Formatter_1.trim(m[2]);
                }
                return line;
            });
            return ar;
        };
        FieldsFormatter.prototype.period = function (period, offset) {
            return ("\n" +
                offset +
                this._localize["Period"]["begin"] +
                " " +
                this._dateFormat(period.begin) +
                "\n" +
                offset +
                this._localize["Period"]["end"] +
                " " +
                this._dateFormat(period.end) +
                "\n");
        };
        return FieldsFormatter;
    }());
    exports.FieldsFormatter = FieldsFormatter;
});


/***/ }),

/***/ 8315:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.trim = exports.paragrathes_nl = exports.paragrathes = exports.dateISOFormat = void 0;
    exports.dateISOFormat = function (d) {
        return d == null ? "" : typeof d === "string" ? d : d.toISOString();
    };
    function paragrathes(a) {
        if (a.length == 0)
            return "";
        // this is simple string
        if (a.length == 1 && a[0].length < 100 && a[0].indexOf("\n") < 0)
            return a[0];
        return a.join("\n\n");
    }
    exports.paragrathes = paragrathes;
    function paragrathes_nl(a, offset) {
        if (a.length == 0)
            return "";
        return "\n" + offset + a.join("\n\n");
    }
    exports.paragrathes_nl = paragrathes_nl;
    exports.trim = function (str) { return str.replace(/^\s+/, "").replace(/\s+$/, ""); };
});


/***/ }),

/***/ 789:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.LocaleCode = void 0;
    var LocaleCode;
    (function (LocaleCode) {
        LocaleCode["ruRU"] = "ru-ru";
        LocaleCode["enUS"] = "en-us";
    })(LocaleCode = exports.LocaleCode || (exports.LocaleCode = {}));
});


/***/ }),

/***/ 3670:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./l10n/index", "./Formatter"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.SimpleTextFormatter = void 0;
    var index_1 = __nccwpck_require__(3509);
    var Formatter_1 = __nccwpck_require__(8315);
    function alignStrings(obj, keys) {
        // find max strings length
        var ml = 0;
        for (var i = 0; i < keys.length; ++i)
            if (ml < obj[keys[i]].length)
                ml = obj[keys[i]].length;
        // pad_right all strings
        keys.forEach(function (key) { return (obj[key] = obj[key].padEnd(ml, " ")); });
    }
    function formatObject(obj, keys, notAlignedKeys, propFormats, localize, offset) {
        var ret = "";
        var localizedKeys = keys.reduce(function (ret, key) {
            ret[key] = localize[key];
            return ret;
        }, {});
        alignStrings(localizedKeys, keys.filter(function (key) { return !notAlignedKeys[key]; }));
        keys.forEach(function (key) {
            if (!obj[key] || (Array.isArray(obj[key]) && !obj[key].length))
                return;
            if (propFormats[key])
                ret +=
                    offset +
                        localizedKeys[key] +
                        " " +
                        propFormats[key](obj[key], offset + "    ") +
                        "\n";
            else
                ret += offset + localizedKeys[key] + " " + obj[key] + "\n";
        });
        ret += "\n";
        return ret;
    }
    var SimpleTextFormatter = /** @class */ (function () {
        function SimpleTextFormatter(localize, dateFormat) {
            if (dateFormat === void 0) { dateFormat = Formatter_1.dateISOFormat; }
            this._baseOffset = "";
            this._localize = localize;
            this._dateFormat = dateFormat;
        }
        SimpleTextFormatter.prototype.appointmentResult = function (ar, offset) {
            if (offset === void 0) { offset = ""; }
            var keys = [
                "created",
                "start",
                "doctor",
                "duration",
                "anamnesis",
                "medicalExaminationResult",
                "diagnosis",
                "recommendations",
                "scheduledProcedures",
                "prescriptions",
            ];
            var propFormats = {
                created: this._dateFormat.bind(this),
                start: this._dateFormat.bind(this),
                doctor: this.doctor.bind(this),
                anamnesis: this.anamnesis.bind(this),
                medicalExaminationResult: this.medicalExaminationResult.bind(this),
                diagnosis: this.diagnosisOffset.bind(this),
                recommendations: this.procedures.bind(this),
                scheduledProcedures: this.procedures.bind(this),
                prescriptions: this.prescriptions.bind(this),
            };
            var notAlignedKeys = {
                scheduledProcedures: 1,
                prescriptions: 1,
            };
            return formatObject(ar, keys, notAlignedKeys, propFormats, this._localize["appointmentResult"], offset);
        };
        SimpleTextFormatter.prototype.medicalExaminationResult = function (ar, offset) {
            ar = ar.map(function (line) {
                var m = line.match(/([^:]*):(.*)/);
                if (m) {
                    m[1] = Formatter_1.trim(m[1]);
                    return (m[1] ? m[1] + ": " : "") + Formatter_1.trim(m[2]);
                }
                return line;
            });
            return "\n" + Formatter_1.paragrathes(ar) + "\n\n";
        };
        SimpleTextFormatter.prototype.anamnesis = function (ar, offset) {
            return "\n" + Formatter_1.paragrathes(ar) + "\n";
        };
        SimpleTextFormatter.prototype.duration = function (n) {
            return n.toString() + " " + this._localize["MINUTE_UNIT"];
        };
        SimpleTextFormatter.prototype.doctor = function (d, offset) {
            if (offset === void 0) { offset = ""; }
            return d.name + " " + d.surname;
        };
        SimpleTextFormatter.prototype.diagnosis = function (d) {
            return this.diagnosisOffset(d, this._baseOffset);
        };
        SimpleTextFormatter.prototype.diagnosisOffset = function (d, offset) {
            var itemToString = function (item) {
                return item.description + (item.cd10 ? " (cd10: " + item.cd10 + ")" : "");
            };
            if (d.length === 0)
                return "";
            if (d.length == 1 &&
                d[0].description.length < 100 &&
                d[0].description.indexOf("\n") < 0) {
                var hasKeyValue = typeof d[0].description === "string" &&
                    d[0].description.match(/([^:]*):(.*)/);
                return (hasKeyValue ? "\n" : "") + itemToString(d[0]);
            }
            return "\n" + d.map(itemToString).join("\n\n");
        };
        SimpleTextFormatter.prototype.procedures = function (p, offset) {
            var this_ = this;
            return ("\n" +
                p
                    .map(function (item, i) {
                    return offset + (i + 1).toString() + ".\n" + this_.procedure(item, offset);
                })
                    .join("\n"));
        };
        SimpleTextFormatter.prototype.procedure = function (p, offset) {
            if (offset === void 0) { offset = ""; }
            var keys = [
                "created",
                "title",
                "services",
                "type",
                "required",
                "status",
                "period",
                "strictPeriod",
                "preparations",
                "requiredPreparations",
            ];
            var propFormats = {
                services: this.services.bind(this),
                type: this.procedureType.bind(this),
                required: this.yesNo.bind(this),
                status: this.procedureExecStatus.bind(this),
                period: this.period.bind(this),
                strictPeriod: this.period.bind(this),
                preparations: Formatter_1.paragrathes_nl,
                requiredPreparations: Formatter_1.paragrathes_nl,
            };
            var notAlignedKeys = {
                period: 1,
                strictPeriod: 1,
                preparations: 1,
                requiredPreparations: 1,
            };
            return formatObject(p, keys, notAlignedKeys, propFormats, this._localize["procedure"], offset);
        };
        SimpleTextFormatter.prototype.yesNo = function (b, offset) {
            return b ? this._localize["YES"] : this._localize["NO"];
        };
        SimpleTextFormatter.prototype.prescriptions = function (p, offset) {
            var _this_1 = this;
            return "\n" + p.map(function (item) { return _this_1.prescription(item, offset); }).join("\n");
        };
        SimpleTextFormatter.prototype.prescription = function (p, offset) {
            if (offset === void 0) { offset = ""; }
            var keys = [
                "created",
                "title",
                "recorderDoctor",
                "medications",
                "dosageText",
                "reasonText",
                "validityPeriod",
                "numberOfRepeats",
            ];
            var propFormats = {
                recorderDoctor: this.doctor.bind(this),
                validityPeriod: this.period.bind(this),
                medications: this.medications.bind(this),
                created: this._dateFormat.bind(this),
            };
            var notAlignedKeys = {
                validityPeriod: 1,
            };
            return formatObject(p, keys, notAlignedKeys, propFormats, this._localize["Prescription"], offset);
        };
        SimpleTextFormatter.prototype.medications = function (s, offset) {
            var _this_1 = this;
            return "\n" + s.map(function (item) { return _this_1.medication(item, offset); }).join("\n");
        };
        SimpleTextFormatter.prototype.medication = function (s, offset) {
            if (offset === void 0) { offset = ""; }
            return (this._localize["MedicationForm"][s.form] +
                ". " +
                s.amount +
                " шт. Срок годности:" +
                this._dateFormat(s.expirationDate));
        };
        SimpleTextFormatter.prototype.services = function (s, offset) {
            var _this_1 = this;
            return "\n" + s.map(function (item) { return _this_1.service(item, offset); }).join("\n");
        };
        SimpleTextFormatter.prototype.service = function (s, offset) {
            return "";
        };
        SimpleTextFormatter.prototype.procedureType = function (type) {
            return this._localize["procedureType"][type];
        };
        SimpleTextFormatter.prototype.procedureExecStatus = function (status) {
            return this._localize["ProcedureExecStatus"][status];
        };
        SimpleTextFormatter.prototype.period = function (period, offset) {
            return ("\n" +
                offset +
                this._localize["Period"]["begin"] +
                " " +
                this._dateFormat(period.begin) +
                "\n" +
                offset +
                this._localize["Period"]["end"] +
                " " +
                this._dateFormat(period.end) +
                "\n");
        };
        SimpleTextFormatter.prototype.diagnosticReport = function (dr, offset) {
            if (offset === void 0) { offset = ""; }
            var _this = this;
            return (offset +
                this.diagnosticReportTitle(dr) +
                "\n" +
                "\n" +
                offset +
                this._localize["CREATED"] +
                " " +
                this._dateFormat(dr.issuedDate) +
                "\n" +
                offset +
                this._localize["DiagnosticReport"]["doctor"] +
                " " +
                dr.resultInterpreter.map(function (d) { return _this.doctor(d); }) +
                "\n" +
                offset +
                this._localize["DiagnosticReport"]["result"] +
                "\n" +
                offset +
                this.observations(dr.result, offset + "  ") +
                (dr.effectivePeriod && dr.effectivePeriod.begin
                    ? "\n" +
                        offset +
                        this._localize["DiagnosticReport"]["effectivePeriod"] +
                        this.period(dr.effectivePeriod, offset + "  ")
                    : "") +
                (dr.resultInterpretation && dr.resultInterpretation.length
                    ? "\n" + offset + "\n" + Formatter_1.paragrathes_nl(dr.resultInterpretation, offset)
                    : "") +
                (dr.imagineMedia && dr.imagineMedia.length
                    ? "\n" +
                        offset +
                        "\n" +
                        offset +
                        this._localize["DiagnosticReport"]["images"] +
                        dr.imagineMedia.map(function (img) { return +"\n" + offset + img; })
                    : "") +
                (dr.attachments && dr.attachments.length
                    ? "\n" +
                        offset +
                        "\n" +
                        offset +
                        this._localize["DiagnosticReport"]["attachments"] +
                        dr.attachments.map(function (a) { return +"\n" + offset + a; })
                    : ""));
        };
        SimpleTextFormatter.prototype.diagnosticReportTitle = function (dr) {
            return dr.services.map(function (s) { return s.name; }).join(", ");
        };
        SimpleTextFormatter.prototype.observations = function (o, offset) {
            var _this = this;
            return o
                .filter(function (o) { return typeof o.value.value === "string"; })
                .map(function (o) { return _this.observation(o, offset) + "\n"; })
                .join("\n");
        };
        SimpleTextFormatter.prototype.observation = function (o, offset) {
            if (offset === void 0) { offset = ""; }
            var prefix;
            if (o.observationKey)
                prefix = offset + o.observationKey + ": ";
            else
                prefix = offset;
            var text = "";
            if (typeof o.value.value === "string") {
                // multiline text
                if (o.value.value.indexOf("\n") >= 0)
                    text =
                        (prefix !== offset ? prefix + "\n" : "") +
                            Formatter_1.trim(o.value.value)
                                .split("\n")
                                .map(function (line) { return offset + Formatter_1.trim(line); })
                                .join("\n");
                else
                    text = prefix + Formatter_1.trim(o.value.value);
            }
            return text;
        };
        SimpleTextFormatter.LOCALIZE = {
            "ru-ru": index_1.default.ruRU,
            "en-us": index_1.default.enUS,
        };
        return SimpleTextFormatter;
    }());
    exports.SimpleTextFormatter = SimpleTextFormatter;
});


/***/ }),

/***/ 2965:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./LocaleCode", "./SimpleTextFormatter", "./FieldsFormatter"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var LocaleCode_1 = __nccwpck_require__(789);
    var SimpleTextFormatter_1 = __nccwpck_require__(3670);
    var FieldsFormatter_1 = __nccwpck_require__(9490);
    exports.default = {
        LocaleCode: LocaleCode_1.LocaleCode,
        SimpleTextFormatter: SimpleTextFormatter_1.SimpleTextFormatter,
        FieldsFormatter: FieldsFormatter_1.FieldsFormatter,
    };
});


/***/ }),

/***/ 7290:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.default = {
        MINUTE_UNIT: "min",
        YES: "Yes",
        NO: "No",
        CREATED: "Creation date",
        appointmentResult: {
            created: "Created",
            start: "Date and time of creation",
            doctor: "Doctor",
            duration: "Duration",
            anamnesis: "Anamnesis",
            medicalExaminationResult: "Examination results",
            diagnosis: "Diagnosis",
            recommendations: "Recommendations",
            scheduledProcedures: "Procedures, medical examinations and lab tests prescribed during the doctor visit",
            prescriptions: "Medicines (prescription drugs)",
        },
        procedure: {
            created: "Created",
            title: "Title",
            services: "Services",
            type: "Type",
            required: "Required",
            status: "Status",
            period: "Expected period of service execution",
            strictPeriod: "Strict service execution period",
            preparations: "Desired preparations for the procedure",
            requiredPreparations: "Required preparations for the procedure",
        },
        procedureType: ["Recommendation", "Procedure", "Lab tests"],
        ProcedureExecStatus: ["Planned", "In progress", "Cancelled", "Complete"],
        Period: {
            begin: "Start date",
            end: "End date",
        },
        DiagnosticReport: {
            Doctor: "Doctor",
            EffectivePeriod: "Medical data effective period",
            Result: "Results",
            Images: "Images",
            Attachments: "Documents",
        },
        Prescription: {
            title: "Drug name",
            created: "Date created",
            recorderDoctor: "The doctor who wrote out this prescription",
            medications: "Drug list",
            dosageText: "Dosage",
            reasonText: "Prescription reason",
            validityPeriod: "Prescription validity period",
            numberOfRepeats: "How many times can you get your prescription drugs",
        },
        MedicationForm: {
            0: "Powder",
            1: "Pills",
            2: "Capsules",
        },
    };
});


/***/ }),

/***/ 3509:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./ru-ru", "./en-us"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var ru_ru_1 = __nccwpck_require__(5611);
    var en_us_1 = __nccwpck_require__(7290);
    exports.default = {
        ruRU: ru_ru_1.default,
        enUS: en_us_1.default,
        getByLocaleCode: function (locale) {
            return {
                "ru-ru": ru_ru_1.default,
                "en-us": en_us_1.default,
            }[locale];
        },
    };
});


/***/ }),

/***/ 5611:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.default = {
        MINUTE_UNIT: "мин.",
        YES: "Да",
        NO: "Нет",
        CREATED: "Дата создания",
        Gender: {
            0: "М",
            1: "Ж",
            2: "Другое",
            3: "Не установлено",
        },
        appointmentResult: {
            business: "ЛПУ",
            created: "Дата создания",
            start: "Дата и время начала",
            doctor: "Врач",
            duration: "Длительность",
            anamnesis: "Анамнез",
            medicalExaminationResult: "Результаты обследования",
            diagnosis: "Диагноз",
            recommendations: "Рекомендации",
            scheduledProcedures: "Процедуры",
            scheduledProceduresHint: "Назначенные на приеме процедуры, анализы, исследования",
            prescriptions: "Назначения",
            prescriptionsHint: "Медикаментозные назначения (выписанные лекарства)",
        },
        procedure: {
            created: "Дата создания",
            title: "Название",
            services: "Услуги",
            type: "Тип",
            required: "Обязательно",
            status: "Статус",
            period: "Предполагаемый период выполнения услуги",
            strictPeriod: "Период выполнения услуги, который нельзя нарушить",
            preparations: "Желаемые приготовления к процедуре",
            requiredPreparations: "Необходимые приготовления к процедуре",
        },
        procedureType: ["Рекомендация", "Процедура", "Анализы"],
        ProcedureExecStatus: ["Запланировано", "В процессе", "Отменено", "Выполнена"],
        Period: {
            begin: "Дата начала",
            end: "Дата окончания",
        },
        DiagnosticReport: {
            doctor: "Врач",
            effectivePeriod: "Период, в течение которого данные действительны",
            result: "Обследование",
            imagineMedia: "Изображения",
            attachments: "Документы",
            id: "Идентификатор",
            created: "Создано",
            active: "Статус",
            business: "ЛПУ",
            patient: "Пациент",
            status: "Статус готовности",
            type: "Тип отчета",
            category: "Категория",
            resultInterpretation: "Отчет, по результатам обследования",
            resultInterpreter: "Врач, составивший отчет",
            services: "Услуги",
            issuedDate: "Дата публикации отчета",
        },
        Prescription: {
            title: "Название",
            created: "Дата создания",
            recorderDoctor: "Врач, выписавший рецепт",
            medications: "Список лекарств",
            dosageText: "Список лекарств",
            reasonText: "Причина назначения",
            validityPeriod: "Время, в течение которого рецепт действует",
            numberOfRepeats: "Сколько раз по этому рецепту можно получить лекарства",
        },
        MedicationForm: {
            0: "Порошок",
            1: "Таблетки",
            2: "Капсулы",
        },
        ActiveStatus: {
            disactive: "Не активно",
            active: "Активно",
        },
        DiagnosisType: {
            laboratoryTest: "Лабораторный тест",
            observation: "Обследование",
            unknown: "Не определено",
        },
        Currency: ["₽", "$"],
        currencyPosition: "right",
        diagnosisTitle: "Диагноз",
        Duration: {
            hour: "час",
            hours: "часов",
            minute: "минута",
            minutes: "минут",
        },
        Observation: {
            id: "Идентификатор",
            createdDate: "Дата создания",
            patientInfo: "Пациент",
            type: "Тип обследования",
            observationKey: "Название обследования",
            status: "Статус",
            effectivePeriod: "Период, в течение которого данные обследования корректны",
            issuedDate: "Дата публикации",
            performerDoctor: "Специалист, выполнивший обследование",
            performerBusiness: "ЛПУ/Лаборатория",
            value: "Данные",
            note: "Заметки",
            interpretation: "Интерпретация",
            ranges: "Допустимые интервалы значений",
            components: "Показатели в интервалах",
        },
        patient: {
            id: "Идентификатор",
            fullName: "Имя",
            phones: "Телефон",
            email: "email",
            gender: "Пол",
            birthdate: "Дата рождения",
            medcardNumber: "Мед Карта",
            address: "Адрес",
        },
        appointment: {
            business: "ЛПУ",
            created: "Дата создания",
            start: "Дата и время начала",
            doctor: "Врач",
            duration: "Длительность",
        },
        filters: {
            Unknown: "Неизвестно",
            PatientByMedCard: "Мед. Карта",
            PatientByName: "Имя",
            PatientByPhone: "Телефон",
            AppointmentByPatientId: "ID Пациента",
            AppointmentByCreated: "Дата создания",
            AppointmentByStarted: "Дата приёма",
            AppointmentByBusiness: "ЛПУ",
            DiagnosticReportByPatient: "ID Пациента",
            DiagnosticReportByCreated: "Дата создания",
            DiagnosticReportByBusiness: "ЛПУ",
            PrescriptionByPatient: "ID Пациента",
            PrescriptionByCreated: "Дата создания",
            PrescriptionByBusiness: "ЛПУ",
        },
    };
});


/***/ }),

/***/ 5818:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("MedMe", ["require", "exports", "./types/index", "./models/index", "./services/index", "./formatters/index", "./Handlers", "./messages/index"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.EHR = void 0;
    ///<amd-module name='MedMe'/>
    var Types = __nccwpck_require__(2464);
    var index_1 = __nccwpck_require__(3422);
    var index_2 = __nccwpck_require__(593);
    var index_3 = __nccwpck_require__(2965);
    var Handlers_1 = __nccwpck_require__(6583);
    var index_4 = __nccwpck_require__(4760);
    exports.EHR = {
        SDK_VERSION: "1.8.13",
        Types: Types,
        Models: index_1.default,
        Services: index_2.default,
        Formatters: index_3.default,
        Handlers: Handlers_1.Handlers,
        Messages: index_4.default,
    };
});


/***/ }),

/***/ 7710:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.AppointmentMessage = void 0;
    var AppointmentMessage = /** @class */ (function () {
        function AppointmentMessage() {
        }
        return AppointmentMessage;
    }());
    exports.AppointmentMessage = AppointmentMessage;
});


/***/ }),

/***/ 4760:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./AppointmentMessage"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var AppointmentMessage_1 = __nccwpck_require__(7710);
    exports.default = {
        AppointmentMessage: AppointmentMessage_1.AppointmentMessage,
    };
});


/***/ }),

/***/ 8128:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.AppointmentModel = exports.copyCommonPropertiesFromJson = void 0;
    function copyCommonPropertiesFromJson(json) {
        this._id = json.id;
        this._patientId = json.patientId;
        if (json.business)
            this._business = json.business;
        this._created = json.created;
        this._start = json.start;
        if (json.doctor)
            this._doctor = json.doctor;
    }
    exports.copyCommonPropertiesFromJson = copyCommonPropertiesFromJson;
    /**
     * Класс модели записи.
     * Обеспечивает доступ к методам создания, редактирования, загружки данных из сервера.
     */
    var AppointmentModel = /** @class */ (function () {
        function AppointmentModel() {
        }
        Object.defineProperty(AppointmentModel.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "patientId", {
            get: function () {
                return this._patientId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "business", {
            get: function () {
                return this._business;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "created", {
            get: function () {
                return this._created;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "start", {
            get: function () {
                return this._start;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "doctor", {
            get: function () {
                return this._doctor;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "services", {
            get: function () {
                return this._services;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "duration", {
            get: function () {
                return this._duration;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "confirmationStatus", {
            get: function () {
                return this._confirmationStatus;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "clientAppear", {
            get: function () {
                return this._clientAppear;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "resultId", {
            get: function () {
                return this._resultId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "clientPrice", {
            get: function () {
                return this._clientPrice;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "source", {
            get: function () {
                return this._source;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentModel.prototype, "history", {
            get: function () {
                return this._history;
            },
            enumerable: false,
            configurable: true
        });
        /**
         *
         * @param json
         */
        AppointmentModel.prototype.fromJson = function (json) {
            copyCommonPropertiesFromJson.call(this, json);
            this._services = json.services;
            this._duration = json.duration;
            this._confirmationStatus = json.confirmationStatus;
            this._clientAppear = json.clientAppear;
            this._resultId = json.resultId;
            this._clientPrice = json.clientPrice;
            this._confirmationStatus = json.status;
            this._source = json.source;
            this._history = json.history;
        };
        /**
         *
         */
        AppointmentModel.prototype.toJson = function () {
            var payload = {
                id: this._id,
                patientId: this._patientId,
            };
            payload.business = this._business.toJson();
            payload.created = this._created.toJSON();
            payload.start = this._start.toJSON();
            payload.doctor = this._doctor.toJson();
            payload.services = Array.isArray(this._services)
                ? this._services.map(function (s) { return s.toJson(); })
                : null;
            payload.duration = this._duration;
            payload.status = this._confirmationStatus;
            payload.clientAppear = this._clientAppear;
            payload.resultId = this._resultId;
            payload.clientPrice = this._clientPrice.toJson();
            payload.source = this._source;
            return payload;
        };
        AppointmentModel.prototype.toJSON = function () {
            return this.toJson();
        };
        AppointmentModel.prototype.toString = function () {
            return JSON.stringify(this.toJson());
        };
        return AppointmentModel;
    }());
    exports.AppointmentModel = AppointmentModel;
});


/***/ }),

/***/ 3422:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./AppointmentModel"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var AppointmentModel_1 = __nccwpck_require__(8128);
    exports.default = {
        AppointmentModel: AppointmentModel_1.AppointmentModel,
    };
});


/***/ }),

/***/ 4274:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./RpcErrorCodes"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAuthenticatedPatientByExchangeToken = exports.getAuthenticatedPatient = exports.ConnectionError = exports.PatientAuthenticationError = exports.PatientAuthenticationStep = exports.PatientAuthenticationResult = exports.AuthInfo = exports.ExchangeTokenResponse = void 0;
    var RpcErrorCodes_1 = require("./RpcErrorCodes");
    var ExchangeTokenResponse = /** @class */ (function () {
        function ExchangeTokenResponse() {
        }
        return ExchangeTokenResponse;
    }());
    exports.ExchangeTokenResponse = ExchangeTokenResponse;
    var AuthInfo = /** @class */ (function () {
        function AuthInfo() {
        }
        return AuthInfo;
    }());
    exports.AuthInfo = AuthInfo;
    var PatientAuthenticationResult = /** @class */ (function () {
        function PatientAuthenticationResult() {
            this.patientAuthenticated = false;
            this.patientFound = false;
            this.patient = null;
            this.userSign = null;
        }
        return PatientAuthenticationResult;
    }());
    exports.PatientAuthenticationResult = PatientAuthenticationResult;
    /**
     * Перечисление шагов сценария аутентификации пациента.
     */
    var PatientAuthenticationStep;
    (function (PatientAuthenticationStep) {
        PatientAuthenticationStep[PatientAuthenticationStep["patient"] = 1] = "patient";
        PatientAuthenticationStep[PatientAuthenticationStep["exchangeToken"] = 2] = "exchangeToken";
        PatientAuthenticationStep[PatientAuthenticationStep["input"] = 3] = "input";
        PatientAuthenticationStep[PatientAuthenticationStep["authenticate"] = 4] = "authenticate";
    })(PatientAuthenticationStep = exports.PatientAuthenticationStep || (exports.PatientAuthenticationStep = {}));
    /**
     * Ошибка сценария аутентификации пациента.
     * Инкапсулирует внутри себя ошибку запроса, предоставляет информацию о типе ошибки и
     * информацию о шаге сценария аутентификации, на котором произошла ошибка.
     */
    var PatientAuthenticationError = /** @class */ (function (_super) {
        __extends(PatientAuthenticationError, _super);
        function PatientAuthenticationError(aStep, anInternalError) {
            var _this = _super.call(this, "Patient authentication error") || this;
            _this.step = aStep;
            _this.internalError = anInternalError;
            return _this;
        }
        PatientAuthenticationError.isAuthorizationError = function (err) {
            return err.internalError && RpcErrorCodes_1.isAuthorizationError(err.internalError);
        };
        PatientAuthenticationError.isAuthenticationError = function (err) {
            return (err.step === PatientAuthenticationStep.authenticate &&
                err.internalError.code === RpcErrorCodes_1.RpcErrorCodes.PatientNotAuthenticated);
        };
        PatientAuthenticationError.isConnectionError = function (err) {
            return err.internalError && err.internalError instanceof ConnectionError;
        };
        PatientAuthenticationError.isEhrServerDisabled = function (err) {
            return (err.step === PatientAuthenticationStep.patient &&
                this.isConnectionError(err));
        };
        PatientAuthenticationError.patientAlreadyMatched = function (err) {
            return (err.step === PatientAuthenticationStep.authenticate &&
                err.internalError.code === RpcErrorCodes_1.RpcErrorCodes.PatientAlreadyMatched);
        };
        PatientAuthenticationError.patientAlreadyLinked = function (err) {
            return (err.step === PatientAuthenticationStep.authenticate &&
                err.internalError.code === RpcErrorCodes_1.RpcErrorCodes.PatientAlreadyLinked);
        };
        return PatientAuthenticationError;
    }(Error));
    exports.PatientAuthenticationError = PatientAuthenticationError;
    var ConnectionError = /** @class */ (function (_super) {
        __extends(ConnectionError, _super);
        function ConnectionError() {
            var _newTarget = this.constructor;
            var _this = _super.call(this, "Connection cannot be established") || this;
            // https://github.com/Microsoft/TypeScript/issues/13965
            _this.__proto__ = _newTarget.prototype;
            return _this;
        }
        return ConnectionError;
    }(Error));
    exports.ConnectionError = ConnectionError;
    /**
     * Функция, реализующая сценарий проверки аутентификации при заходе пользователя в Мед.карту.
     *
     * 1. Запрос на получение данных пациента.
     * 2.1. Если запрос с текущими креденшиалами завершился успешно, возвращаем результат (+статус, что пациент получен стазу)
     * 2.2. Если запрос с текущими креденшиалами завершился ошибкой "пользователь не аутентифицирован", то переходим на п.3
     * 3. Отправляем запрос на обмен токенов на сервер авторизации
     * 4. Получаем через форму ввода от пользователя его аутентификационные данные
     * 5. Выполняем запрос на аутентификацию на EHR сервер. Если запрос завершился успешно, возвращаем результат
     *   (+статус, что пациента аутентифицировали)
     *
     * @param {IPatientService} patientService
     * @param {IAuthService} authService
     * @param {function} patientInput
     * @param {function} cb
     */
    function getAuthenticatedPatient(patientService, authService, patientInput, cb) {
        patientService.getPatient(function (err, patient, userSign) {
            if (err && RpcErrorCodes_1.isAuthorizationError(err))
                return authService.getExchangeToken(function (err, res) {
                    if (err)
                        return cb(new PatientAuthenticationError(PatientAuthenticationStep.exchangeToken, err), null);
                    var exchangeToken = res.exchangeToken;
                    patientInput(function (err, searchStrategy, patientProperties, medCardId) {
                        if (err)
                            return cb(new PatientAuthenticationError(PatientAuthenticationStep.input, err), null);
                        authService.authenticate(exchangeToken, searchStrategy, patientProperties, medCardId, function (err, patient, userSign) {
                            // Возможные типы ошибок:
                            // - пользователь не найден (ошибка аутентификации) - сообщение пользователю
                            // - пользователь уже аутентифицирован - перелогиниться
                            if (err)
                                return cb(new PatientAuthenticationError(PatientAuthenticationStep.authenticate, err), null);
                            var authenticated = new PatientAuthenticationResult();
                            authenticated.patient = patient;
                            authenticated.patientAuthenticated = true;
                            authenticated.userSign = userSign;
                            cb(null, authenticated);
                        });
                    });
                });
            // Если возникла какая-то другая ошибка при получении пациента - возвращаем сообщение об ошибке
            if (err)
                return cb(new PatientAuthenticationError(PatientAuthenticationStep.patient, err), null);
            var authenticated = new PatientAuthenticationResult();
            authenticated.patient = patient;
            authenticated.patientFound = true;
            authenticated.userSign = userSign;
            return cb(null, authenticated);
        });
    }
    exports.getAuthenticatedPatient = getAuthenticatedPatient;
    /**
     * Функция, аналогичная предыдущей, за исключением того, что токен обмена был получен ранее.
     *
     * @param {string} exchangeToken
     * @param {IAuthService} authService
     * @param {function} patientInput
     * @param {function} cb
     */
    function getAuthenticatedPatientByExchangeToken(exchangeToken, authService, patientInput, cb) {
        patientInput(function (err, searchStrategy, patientProperties, medCardId) {
            if (err)
                return cb(new PatientAuthenticationError(PatientAuthenticationStep.input, err), null);
            authService.authenticate(exchangeToken, searchStrategy, patientProperties, medCardId, function (err, patient, userSign) {
                // Возможные типы ошибок:
                // - пользователь не найден (ошибка аутентификации) - сообщение пользователю
                // - пользователь уже аутентифицирован - перелогиниться
                if (err)
                    return cb(new PatientAuthenticationError(PatientAuthenticationStep.authenticate, err), null);
                var authenticated = new PatientAuthenticationResult();
                authenticated.patient = patient;
                authenticated.patientAuthenticated = true;
                authenticated.userSign = userSign;
                cb(null, authenticated);
            });
        });
    }
    exports.getAuthenticatedPatientByExchangeToken = getAuthenticatedPatientByExchangeToken;
});


/***/ }),

/***/ 9463:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Credentials = void 0;
    var Credentials = /** @class */ (function () {
        function Credentials(user, token) {
            this.user = user;
            this.token = token;
        }
        return Credentials;
    }());
    exports.Credentials = Credentials;
});


/***/ }),

/***/ 6041:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.isAuthorizationError = exports.RpcErrorCodes = void 0;
    var RpcErrorCodes = /** @class */ (function () {
        function RpcErrorCodes() {
        }
        RpcErrorCodes.ParseError = -32700;
        RpcErrorCodes.InvalidRequest = -32600;
        RpcErrorCodes.MethodNotFound = -32601;
        RpcErrorCodes.InvalidParams = -32602;
        RpcErrorCodes.UnknownError = -32603;
        RpcErrorCodes.NotAuthorized = -33000;
        RpcErrorCodes.AuthExpired = -33001;
        RpcErrorCodes.UnknownAuthError = -33002;
        RpcErrorCodes.AccessForbidden = -33403;
        RpcErrorCodes.PatientAlreadyMatched = -34000;
        RpcErrorCodes.PatientNotAuthenticated = -34001;
        RpcErrorCodes.PatientNotFound = -34002;
        RpcErrorCodes.SaveAuthInfoError = -34003;
        RpcErrorCodes.SaveExchangeTokenError = -34004;
        RpcErrorCodes.AppointmentNotFound = -34005;
        RpcErrorCodes.DiagnosticReportNotFound = -34006;
        RpcErrorCodes.UserNotFound = -34007;
        RpcErrorCodes.PrescriptionNotFound = -34008;
        RpcErrorCodes.PatientAlreadyLinked = -34009;
        RpcErrorCodes.AppointmentResultNotFound = -34010;
        RpcErrorCodes.LinkedPatientNotFound = -34011;
        return RpcErrorCodes;
    }());
    exports.RpcErrorCodes = RpcErrorCodes;
    function isAuthorizationError(err) {
        return (err.code === RpcErrorCodes.NotAuthorized ||
            err.code === RpcErrorCodes.AuthExpired ||
            err.code === RpcErrorCodes.UnknownAuthError);
    }
    exports.isAuthorizationError = isAuthorizationError;
});


/***/ }),

/***/ 5083:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../formatters/l10n/index", "./DatePeriodFilter", "./Filters", "./FilterTypes"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AppointmentFilters = exports.AppointmentByPatientIdFilter = exports.AppointmentByStartFilter = exports.AppointmentByCreatedFilter = exports.AppointmentByBusinessIdFilter = void 0;
    var index_1 = require("../../formatters/l10n/index");
    var DatePeriodFilter_1 = require("./DatePeriodFilter");
    var Filters_1 = require("./Filters");
    var FilterTypes_1 = require("./FilterTypes");
    function isNullUndefEmpty(val) {
        return typeof val === "undefined" || val === null || val === "";
    }
    function isNullUndef(val) {
        return val === null || typeof val === "undefined";
    }
    function isNullUndefZero(val) {
        return val === null || typeof val === "undefined" || val.getTime() === 0;
    }
    var AppointmentByBusinessIdFilter = /** @class */ (function (_super) {
        __extends(AppointmentByBusinessIdFilter, _super);
        function AppointmentByBusinessIdFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.businessId = "";
            _this.businessName = "";
            return _this;
        }
        Object.defineProperty(AppointmentByBusinessIdFilter.prototype, "prettyValue", {
            get: function () {
                return this.businessName;
            },
            enumerable: false,
            configurable: true
        });
        AppointmentByBusinessIdFilter.prototype.setup = function (val) {
            this.businessId = (val === null || val === void 0 ? void 0 : val.businessId) || "";
            this.businessName = (val === null || val === void 0 ? void 0 : val.businessName) || "";
        };
        AppointmentByBusinessIdFilter.prototype.plain = function () {
            return { businessId: this.businessId, businessName: this.businessName };
        };
        Object.defineProperty(AppointmentByBusinessIdFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.AppointmentByBusiness;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentByBusinessIdFilter.prototype, "key", {
            get: function () {
                return FilterTypes_1.FilterKeys[this.kind];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AppointmentByBusinessIdFilter.prototype, "title", {
            get: function () {
                return this.localize[this.key];
            },
            enumerable: false,
            configurable: true
        });
        AppointmentByBusinessIdFilter.prototype.isEmpty = function () {
            return isNullUndefEmpty(this.businessId);
        };
        return AppointmentByBusinessIdFilter;
    }(Filters_1.Filter));
    exports.AppointmentByBusinessIdFilter = AppointmentByBusinessIdFilter;
    var AppointmentByCreatedFilter = /** @class */ (function (_super) {
        __extends(AppointmentByCreatedFilter, _super);
        function AppointmentByCreatedFilter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AppointmentByCreatedFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.AppointmentByCreated;
            },
            enumerable: false,
            configurable: true
        });
        return AppointmentByCreatedFilter;
    }(DatePeriodFilter_1.DatePeriodFilter));
    exports.AppointmentByCreatedFilter = AppointmentByCreatedFilter;
    var AppointmentByStartFilter = /** @class */ (function (_super) {
        __extends(AppointmentByStartFilter, _super);
        function AppointmentByStartFilter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(AppointmentByStartFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.AppointmentByStarted;
            },
            enumerable: false,
            configurable: true
        });
        return AppointmentByStartFilter;
    }(DatePeriodFilter_1.DatePeriodFilter));
    exports.AppointmentByStartFilter = AppointmentByStartFilter;
    var AppointmentByPatientIdFilter = /** @class */ (function (_super) {
        __extends(AppointmentByPatientIdFilter, _super);
        function AppointmentByPatientIdFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.patientId = "";
            return _this;
        }
        Object.defineProperty(AppointmentByPatientIdFilter.prototype, "prettyValue", {
            get: function () {
                return this.patientId;
            },
            enumerable: false,
            configurable: true
        });
        AppointmentByPatientIdFilter.prototype.setup = function (val) {
            this.patientId = (val === null || val === void 0 ? void 0 : val.patientId) || "";
        };
        AppointmentByPatientIdFilter.prototype.plain = function () {
            return { patientId: this.patientId };
        };
        Object.defineProperty(AppointmentByPatientIdFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.AppointmentByPatientId;
            },
            enumerable: false,
            configurable: true
        });
        AppointmentByPatientIdFilter.prototype.isEmpty = function () {
            return isNullUndefEmpty(this.patientId);
        };
        return AppointmentByPatientIdFilter;
    }(Filters_1.Filter));
    exports.AppointmentByPatientIdFilter = AppointmentByPatientIdFilter;
    var AppointmentFilters = /** @class */ (function (_super) {
        __extends(AppointmentFilters, _super);
        function AppointmentFilters(localize) {
            var _this = _super.call(this) || this;
            _this.byBusinessId = new AppointmentByBusinessIdFilter(localize);
            _this.byCreated = new AppointmentByCreatedFilter(localize);
            _this.byPatientId = new AppointmentByPatientIdFilter(localize);
            _this.byStart = new AppointmentByStartFilter(localize);
            return _this;
        }
        AppointmentFilters.createWithLocale = function (locale) {
            return new AppointmentFilters(index_1.default.getByLocaleCode(locale)["filters"]);
        };
        AppointmentFilters.prototype.setup = function (val) {
            if (isNullUndef(val))
                return;
            this.byBusinessId.setup(val["byBusines"]);
            this.byCreated.setup(val["byCreated"]);
            this.byStart.setup(val["byStart"]);
            this.byPatientId.setup(val["byPatient"]);
        };
        AppointmentFilters.prototype.plain = function () {
            return {
                byBusiness: this.byBusinessId.plain(),
                byCreated: this.byCreated.plain(),
                byStart: this.byStart.plain(),
                byPatient: this.byPatientId.plain(),
            };
        };
        AppointmentFilters.prototype.getFilters = function () {
            return [this.byBusinessId, this.byCreated, this.byStart, this.byPatientId];
        };
        return AppointmentFilters;
    }(Filters_1.FilterList));
    exports.AppointmentFilters = AppointmentFilters;
});


/***/ }),

/***/ 355:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../formatters/l10n/index", "./DatePeriodFilter", "./Filters", "./FilterTypes"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiagnosticReportFilters = exports.DiagnosticReportByPatientIdFilter = exports.DiagnosticReportByCreatedFilter = exports.DiagnosticReportByBusinessIdFilter = void 0;
    var index_1 = require("../../formatters/l10n/index");
    var DatePeriodFilter_1 = require("./DatePeriodFilter");
    var Filters_1 = require("./Filters");
    var FilterTypes_1 = require("./FilterTypes");
    function isNullUndefEmpty(val) {
        return val == undefined || val == null || val == "";
    }
    function isNullUndef(val) {
        return val == null || val == undefined;
    }
    function isNullUndefZero(val) {
        return val == null || val == undefined || val.getTime() == 0;
    }
    var DiagnosticReportByBusinessIdFilter = /** @class */ (function (_super) {
        __extends(DiagnosticReportByBusinessIdFilter, _super);
        function DiagnosticReportByBusinessIdFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.businessId = "";
            _this.businessName = "";
            return _this;
        }
        Object.defineProperty(DiagnosticReportByBusinessIdFilter.prototype, "prettyValue", {
            get: function () {
                return this.businessName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DiagnosticReportByBusinessIdFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.DiagnosticReportByBusiness;
            },
            enumerable: false,
            configurable: true
        });
        DiagnosticReportByBusinessIdFilter.prototype.isEmpty = function () {
            return isNullUndefEmpty(this.businessId);
        };
        DiagnosticReportByBusinessIdFilter.prototype.setup = function (val) {
            this.businessId = (val === null || val === void 0 ? void 0 : val.businessId) || "";
            this.businessName = (val === null || val === void 0 ? void 0 : val.businessName) || "";
        };
        DiagnosticReportByBusinessIdFilter.prototype.plain = function () {
            return { businessId: this.businessId, businessName: this.businessName };
        };
        return DiagnosticReportByBusinessIdFilter;
    }(Filters_1.Filter));
    exports.DiagnosticReportByBusinessIdFilter = DiagnosticReportByBusinessIdFilter;
    var DiagnosticReportByCreatedFilter = /** @class */ (function (_super) {
        __extends(DiagnosticReportByCreatedFilter, _super);
        function DiagnosticReportByCreatedFilter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(DiagnosticReportByCreatedFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.DiagnosticReportByCreated;
            },
            enumerable: false,
            configurable: true
        });
        return DiagnosticReportByCreatedFilter;
    }(DatePeriodFilter_1.DatePeriodFilter));
    exports.DiagnosticReportByCreatedFilter = DiagnosticReportByCreatedFilter;
    var DiagnosticReportByPatientIdFilter = /** @class */ (function (_super) {
        __extends(DiagnosticReportByPatientIdFilter, _super);
        function DiagnosticReportByPatientIdFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.patientId = "";
            return _this;
        }
        Object.defineProperty(DiagnosticReportByPatientIdFilter.prototype, "prettyValue", {
            get: function () {
                return this.patientId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DiagnosticReportByPatientIdFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.DiagnosticReportByPatientId;
            },
            enumerable: false,
            configurable: true
        });
        DiagnosticReportByPatientIdFilter.prototype.isEmpty = function () {
            return isNullUndefEmpty(this.patientId);
        };
        DiagnosticReportByPatientIdFilter.prototype.setup = function (val) {
            this.patientId = (val === null || val === void 0 ? void 0 : val.patientId) || "";
        };
        DiagnosticReportByPatientIdFilter.prototype.plain = function () {
            return {
                patientId: this.patientId || "",
            };
        };
        return DiagnosticReportByPatientIdFilter;
    }(Filters_1.Filter));
    exports.DiagnosticReportByPatientIdFilter = DiagnosticReportByPatientIdFilter;
    var DiagnosticReportFilters = /** @class */ (function (_super) {
        __extends(DiagnosticReportFilters, _super);
        function DiagnosticReportFilters(localize) {
            var _this = _super.call(this) || this;
            _this.byBusinessId = new DiagnosticReportByBusinessIdFilter(localize);
            _this.byCreated = new DiagnosticReportByCreatedFilter(localize);
            _this.byPatientId = new DiagnosticReportByPatientIdFilter(localize);
            return _this;
        }
        DiagnosticReportFilters.createWithLocale = function (locale) {
            return new DiagnosticReportFilters(index_1.default.getByLocaleCode(locale)["filters"]);
        };
        DiagnosticReportFilters.prototype.setup = function (val) {
            if (isNullUndef(val))
                return;
            this.byBusinessId.setup(val["byBusines"]);
            this.byCreated.setup(val["byCreated"]);
            this.byPatientId.setup(val["byPatient"]);
        };
        DiagnosticReportFilters.prototype.plain = function () {
            return {
                byBusiness: this.byBusinessId.plain(),
                byCreated: this.byCreated.plain(),
                byPatient: this.byPatientId.plain(),
            };
        };
        DiagnosticReportFilters.prototype.getFilters = function () {
            return [this.byBusinessId, this.byCreated, this.byPatientId];
        };
        return DiagnosticReportFilters;
    }(Filters_1.FilterList));
    exports.DiagnosticReportFilters = DiagnosticReportFilters;
});


/***/ }),

/***/ 8428:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../formatters/l10n/index", "./Filters", "./FilterTypes"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PatientFilters = exports.PatientByPhoneFilter = exports.PatientByMedCardFilter = exports.PatientByNameFilter = void 0;
    var index_1 = require("../../formatters/l10n/index");
    var Filters_1 = require("./Filters");
    var FilterTypes_1 = require("./FilterTypes");
    function isNullUndefEmpty(val) {
        return val == undefined || val == null || val == "";
    }
    function isNullUndef(val) {
        return val == null || val == undefined;
    }
    var PatientByNameFilter = /** @class */ (function (_super) {
        __extends(PatientByNameFilter, _super);
        function PatientByNameFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.name = "";
            return _this;
        }
        Object.defineProperty(PatientByNameFilter.prototype, "prettyValue", {
            get: function () {
                return this.name;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PatientByNameFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.PatientByName;
            },
            enumerable: false,
            configurable: true
        });
        PatientByNameFilter.prototype.isEmpty = function () {
            return isNullUndefEmpty(this.name);
        };
        PatientByNameFilter.prototype.setup = function (val) {
            this.name = (val === null || val === void 0 ? void 0 : val.name) || "";
        };
        PatientByNameFilter.prototype.plain = function () {
            return { name: this.name };
        };
        return PatientByNameFilter;
    }(Filters_1.Filter));
    exports.PatientByNameFilter = PatientByNameFilter;
    var PatientByMedCardFilter = /** @class */ (function (_super) {
        __extends(PatientByMedCardFilter, _super);
        function PatientByMedCardFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.medCardId = "";
            return _this;
        }
        Object.defineProperty(PatientByMedCardFilter.prototype, "prettyValue", {
            get: function () {
                return this.medCardId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PatientByMedCardFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.PatientByMedCard;
            },
            enumerable: false,
            configurable: true
        });
        PatientByMedCardFilter.prototype.isEmpty = function () {
            return isNullUndefEmpty(this.medCardId);
        };
        PatientByMedCardFilter.prototype.setup = function (val) {
            this.medCardId = (val === null || val === void 0 ? void 0 : val.medCardId) || "";
        };
        PatientByMedCardFilter.prototype.plain = function () {
            return { medCardId: this.medCardId };
        };
        return PatientByMedCardFilter;
    }(Filters_1.Filter));
    exports.PatientByMedCardFilter = PatientByMedCardFilter;
    var PatientByPhoneFilter = /** @class */ (function (_super) {
        __extends(PatientByPhoneFilter, _super);
        function PatientByPhoneFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.phone = "";
            return _this;
        }
        Object.defineProperty(PatientByPhoneFilter.prototype, "prettyValue", {
            get: function () {
                return this.phone;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PatientByPhoneFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.PatientByPhone;
            },
            enumerable: false,
            configurable: true
        });
        PatientByPhoneFilter.prototype.isEmpty = function () {
            return isNullUndefEmpty(this.phone);
        };
        PatientByPhoneFilter.prototype.setup = function (val) {
            this.phone = (val === null || val === void 0 ? void 0 : val.phone) || "";
        };
        PatientByPhoneFilter.prototype.plain = function () {
            return { phone: this.phone };
        };
        return PatientByPhoneFilter;
    }(Filters_1.Filter));
    exports.PatientByPhoneFilter = PatientByPhoneFilter;
    var PatientFilters = /** @class */ (function (_super) {
        __extends(PatientFilters, _super);
        function PatientFilters(localize) {
            var _this = _super.call(this) || this;
            _this.byMedCard = new PatientByMedCardFilter(localize);
            _this.byName = new PatientByNameFilter(localize);
            _this.byPhone = new PatientByPhoneFilter(localize);
            return _this;
        }
        PatientFilters.createWithLocale = function (locale) {
            return new PatientFilters(index_1.default.getByLocaleCode(locale)["filters"]);
        };
        PatientFilters.prototype.getFilters = function () {
            return [this.byName, this.byMedCard, this.byPhone];
        };
        PatientFilters.prototype.setup = function (val) {
            if (isNullUndef(val))
                return;
            this.byName.setup(val["byName"]);
            this.byMedCard.setup(val["byMedCard"]);
            this.byPhone.setup(val["byPhone"]);
        };
        PatientFilters.prototype.plain = function () {
            return {
                byName: this.byName.plain(),
                byMedCard: this.byMedCard.plain(),
                byPhone: this.byPhone.plain(),
            };
        };
        return PatientFilters;
    }(Filters_1.FilterList));
    exports.PatientFilters = PatientFilters;
});


/***/ }),

/***/ 4266:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../formatters/l10n/index", "./DatePeriodFilter", "./Filters", "./FilterTypes"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrescriptionFilters = exports.PrescriptionByPatientIdFilter = exports.PrescriptionByCreatedFilter = exports.PrescriptionByBusinessIdFilter = void 0;
    var index_1 = require("../../formatters/l10n/index");
    var DatePeriodFilter_1 = require("./DatePeriodFilter");
    var Filters_1 = require("./Filters");
    var FilterTypes_1 = require("./FilterTypes");
    function isNullUndefEmpty(val) {
        return val == undefined || val == null || val == "";
    }
    function isNullUndef(val) {
        return val == null || val == undefined;
    }
    function isNullUndefZero(val) {
        return val == null || val == undefined || val.getTime() == 0;
    }
    var PrescriptionByBusinessIdFilter = /** @class */ (function (_super) {
        __extends(PrescriptionByBusinessIdFilter, _super);
        function PrescriptionByBusinessIdFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.businessId = "";
            _this.businessName = "";
            return _this;
        }
        Object.defineProperty(PrescriptionByBusinessIdFilter.prototype, "prettyValue", {
            get: function () {
                return this.businessName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrescriptionByBusinessIdFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.PrescriptionByBusiness;
            },
            enumerable: false,
            configurable: true
        });
        PrescriptionByBusinessIdFilter.prototype.isEmpty = function () {
            return isNullUndefEmpty(this.businessId);
        };
        PrescriptionByBusinessIdFilter.prototype.setup = function (val) {
            this.businessId = (val === null || val === void 0 ? void 0 : val.businessId) || "";
            this.businessName = (val === null || val === void 0 ? void 0 : val.businessName) || "";
        };
        PrescriptionByBusinessIdFilter.prototype.plain = function () {
            return { businessId: this.businessId, businessName: this.businessName };
        };
        return PrescriptionByBusinessIdFilter;
    }(Filters_1.Filter));
    exports.PrescriptionByBusinessIdFilter = PrescriptionByBusinessIdFilter;
    var PrescriptionByCreatedFilter = /** @class */ (function (_super) {
        __extends(PrescriptionByCreatedFilter, _super);
        function PrescriptionByCreatedFilter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(PrescriptionByCreatedFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.PrescriptionByCreated;
            },
            enumerable: false,
            configurable: true
        });
        return PrescriptionByCreatedFilter;
    }(DatePeriodFilter_1.DatePeriodFilter));
    exports.PrescriptionByCreatedFilter = PrescriptionByCreatedFilter;
    var PrescriptionByPatientIdFilter = /** @class */ (function (_super) {
        __extends(PrescriptionByPatientIdFilter, _super);
        function PrescriptionByPatientIdFilter() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.patientId = "";
            return _this;
        }
        Object.defineProperty(PrescriptionByPatientIdFilter.prototype, "prettyValue", {
            get: function () {
                return this.patientId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PrescriptionByPatientIdFilter.prototype, "kind", {
            get: function () {
                return FilterTypes_1.FilterTypeEnum.PrescriptionByPatient;
            },
            enumerable: false,
            configurable: true
        });
        PrescriptionByPatientIdFilter.prototype.isEmpty = function () {
            return isNullUndefEmpty(this.patientId);
        };
        PrescriptionByPatientIdFilter.prototype.setup = function (val) {
            this.patientId = (val === null || val === void 0 ? void 0 : val.patientId) || "";
        };
        PrescriptionByPatientIdFilter.prototype.plain = function () {
            return {
                patientId: this.patientId || "",
            };
        };
        return PrescriptionByPatientIdFilter;
    }(Filters_1.Filter));
    exports.PrescriptionByPatientIdFilter = PrescriptionByPatientIdFilter;
    var PrescriptionFilters = /** @class */ (function (_super) {
        __extends(PrescriptionFilters, _super);
        function PrescriptionFilters(localize) {
            var _this = _super.call(this) || this;
            _this.byBusinessId = new PrescriptionByBusinessIdFilter(localize);
            _this.byCreated = new PrescriptionByCreatedFilter(localize);
            _this.byPatientId = new PrescriptionByPatientIdFilter(localize);
            return _this;
        }
        PrescriptionFilters.createWithLocale = function (locale) {
            return new PrescriptionFilters(index_1.default.getByLocaleCode(locale)["filters"]);
        };
        PrescriptionFilters.prototype.setup = function (val) {
            if (isNullUndef(val))
                return;
            this.byBusinessId.setup(val["byBusines"]);
            this.byCreated.setup(val["byCreated"]);
            this.byPatientId.setup(val["byPatient"]);
        };
        PrescriptionFilters.prototype.plain = function () {
            return {
                byBusiness: this.byBusinessId.plain(),
                byCreated: this.byCreated.plain(),
                byPatient: this.byPatientId.plain(),
            };
        };
        PrescriptionFilters.prototype.getFilters = function () {
            return [this.byBusinessId, this.byCreated, this.byPatientId];
        };
        return PrescriptionFilters;
    }(Filters_1.FilterList));
    exports.PrescriptionFilters = PrescriptionFilters;
});


/***/ }),

/***/ 6477:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./PatientFilters", "./AppointmentFilters", "./DiagnosticReportFilters", "./PrescriptionFilters"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var PatientFilters_1 = __nccwpck_require__(8428);
    var AppointmentFilters_1 = __nccwpck_require__(5083);
    var DiagnosticReportFilters_1 = __nccwpck_require__(355);
    var PrescriptionFilters_1 = __nccwpck_require__(4266);
    exports.default = {
        PatientByNameFilter: PatientFilters_1.PatientByNameFilter,
        PatientByMedCardFilter: PatientFilters_1.PatientByMedCardFilter,
        PatientByPhoneFilter: PatientFilters_1.PatientByPhoneFilter,
        PatientFilters: PatientFilters_1.PatientFilters,
        AppointmentByBusinessIdFilter: AppointmentFilters_1.AppointmentByBusinessIdFilter,
        AppointmentByCreatedFilter: AppointmentFilters_1.AppointmentByCreatedFilter,
        AppointmentByStartFilter: AppointmentFilters_1.AppointmentByStartFilter,
        AppointmentByPatientIdFilter: AppointmentFilters_1.AppointmentByPatientIdFilter,
        AppointmentFilters: AppointmentFilters_1.AppointmentFilters,
        DiagnosticReportByBusinessIdFilter: DiagnosticReportFilters_1.DiagnosticReportByBusinessIdFilter,
        DiagnosticReportByCreatedFilter: DiagnosticReportFilters_1.DiagnosticReportByCreatedFilter,
        DiagnosticReportByPatientIdFilter: DiagnosticReportFilters_1.DiagnosticReportByPatientIdFilter,
        DiagnosticReportFilters: DiagnosticReportFilters_1.DiagnosticReportFilters,
        PrescriptionByBusinessIdFilter: PrescriptionFilters_1.PrescriptionByBusinessIdFilter,
        PrescriptionByCreatedFilter: PrescriptionFilters_1.PrescriptionByCreatedFilter,
        PrescriptionByPatientIdFilter: PrescriptionFilters_1.PrescriptionByPatientIdFilter,
        PrescriptionFilters: PrescriptionFilters_1.PrescriptionFilters,
    };
});


/***/ }),

/***/ 593:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./jsonRPC/index", "./AuthService", "./Credentials", "./RpcErrorCodes", "./filters/index"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    //import InMemory from './inMemory/index';
    //import BinRPC from './binRPC/index';
    var index_1 = __nccwpck_require__(3709);
    var AuthService_1 = __nccwpck_require__(4274);
    var Credentials_1 = __nccwpck_require__(9463);
    var RpcErrorCodes_1 = __nccwpck_require__(6041);
    var index_2 = __nccwpck_require__(6477);
    exports.default = {
        // InMemory
        //, BinRPC
        JsonRPC: index_1.default,
        PatientAuthenticationResult: AuthService_1.PatientAuthenticationResult,
        PatientAuthenticationStep: AuthService_1.PatientAuthenticationStep,
        PatientAuthenticationError: AuthService_1.PatientAuthenticationError,
        ConnectionError: AuthService_1.ConnectionError,
        getAuthenticatedPatient: AuthService_1.getAuthenticatedPatient,
        getAuthenticatedPatientByExchangeToken: AuthService_1.getAuthenticatedPatientByExchangeToken,
        Credentials: Credentials_1.Credentials,
        RpcErrorCodes: RpcErrorCodes_1.RpcErrorCodes,
        Filters: index_2.default,
    };
});


/***/ }),

/***/ 7136:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../models/AppointmentResultModel", "./jsonRpcService", "../../Handlers"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AppointmentResultService = void 0;
    var AppointmentResultModel_1 = require("../../models/AppointmentResultModel");
    var jsonRpcService_1 = require("./jsonRpcService");
    var Handlers_1 = require("../../Handlers");
    var AppointmentResultService = /** @class */ (function (_super) {
        __extends(AppointmentResultService, _super);
        function AppointmentResultService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Возвращает результаты записи по идентификатору.
         * @param id идентификатор результата записи
         * @param cb callback
         */
        AppointmentResultService.prototype.getAppointmentResultById = function (id, cb) {
            var _this_1 = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_APPOINTMENT_RESULT_BY_ID_METHOD, { id: id }, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrors_ = payload["validationErrors"];
                return cb(null, payload["appointmentResult"]);
            });
        };
        AppointmentResultService.prototype.getAppointmentResultByIdAsync = function (id) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getAppointmentResultById(id, function (err, appointment) {
                    if (err)
                        return rej(err);
                    // console.log("appointment_result.id:", appointment.id);
                    res(appointment);
                });
            });
        };
        AppointmentResultService.prototype.getPatientAppointmentResults = function (patientId, limit, offset, cb) {
            var _this_1 = this;
            var params = { patientId: patientId, limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_APPOINTMENT_RESULTS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                var appointmentResults = payload["appointmentResults"].map(function (jsonApp) {
                    var app = new AppointmentResultModel_1.AppointmentResultModel();
                    app.fromJson(jsonApp);
                    return app;
                });
                return cb(null, appointmentResults);
            });
        };
        AppointmentResultService.prototype.getPatientAppointmentResultsAsync = function (patientId, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatientAppointmentResults(patientId, limit, offset, function (err, appResults) {
                    if (err)
                        return rej(err);
                    res(appResults);
                });
            });
        };
        AppointmentResultService.prototype.getAppointmentResults = function (limit, offset, cb) {
            var _this_1 = this;
            var params = { limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_APPOINTMENT_RESULTS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                return cb(null, payload["appointmentResults"]);
            });
        };
        AppointmentResultService.prototype.getAppointmentResultsAsync = function (limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getAppointmentResults(limit, offset, function (err, appResults) {
                    if (err)
                        return rej(err);
                    res(appResults);
                });
            });
        };
        AppointmentResultService.prototype.getAppointmentResultsCount = function (cb) {
            var _this_1 = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_APPOINTMENT_RESULTS_COUNT_METHOD, {}, function (err, payload) {
                if (err)
                    return cb(err, null, false);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        AppointmentResultService.prototype.getAppointmentResultsCountAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.getAppointmentResultsCount(function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        AppointmentResultService.prototype.getPatientAppointmentResultsCount = function (patientId, cb) {
            var _this_1 = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_APPOINTMENT_RESULTS_COUNT_METHOD, { patientId: patientId }, function (err, payload) {
                if (err)
                    return cb(err, null, false);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        AppointmentResultService.prototype.getPatientAppointmentResultsCountAsync = function (patientId) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatientAppointmentResultsCount(patientId, function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        AppointmentResultService.prototype.searchAppointmentResults = function (includes, excludes, filters, limit, offset, cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_SEARCH_APPOINTMENT_RESULTS_METHOD, { includes: includes, excludes: excludes, filters: filters.plain(), limit: limit, offset: offset }, function (err, payload) {
                if (err)
                    return cb(err, []);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["appointmentResults"]);
            });
        };
        AppointmentResultService.prototype.searchAppointmentResultsAsync = function (includes, excludes, filters, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.searchAppointmentResults(includes, excludes, filters, limit, offset, function (err, reports) {
                    if (err)
                        return rej(err);
                    res(reports);
                });
            });
        };
        AppointmentResultService.prototype.searchAppointmentResultsCount = function (includes, excludes, filters, cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_SEARCH_APPOINTMENT_RESULTS_COUNT_METHOD, { includes: includes, excludes: excludes, filters: filters.plain() }, function (err, payload) {
                if (err)
                    return cb(err, 0, false);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        AppointmentResultService.prototype.searchAppointmentResultsCountAsync = function (includes, excludes, filters) {
            var service = this;
            return new Promise(function (res, rej) {
                service.searchAppointmentResultsCount(includes, excludes, filters, function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        return AppointmentResultService;
    }(jsonRpcService_1.JsonRPCCredService));
    exports.AppointmentResultService = AppointmentResultService;
});


/***/ }),

/***/ 824:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../models/AppointmentModel", "./jsonRpcService", "../../Handlers"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AppointmentService = void 0;
    var AppointmentModel_1 = require("../../models/AppointmentModel");
    var jsonRpcService_1 = require("./jsonRpcService");
    var Handlers_1 = require("../../Handlers");
    var AppointmentService = /** @class */ (function (_super) {
        __extends(AppointmentService, _super);
        function AppointmentService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AppointmentService.prototype.getAppointmentById = function (id, cb) {
            this.exec(Handlers_1.Handlers.HANDLER_GET_APPOINTMENT_BY_ID_METHOD, { id: id }, function (err, payload) {
                if (err)
                    return cb(err, null);
                return cb(null, payload["appointment"]);
            });
        };
        AppointmentService.prototype.getAppointmentByIdAsync = function (id) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getAppointmentById(id, function (err, appointment) {
                    // console.log("appointment.patientId:", appointment.patientId);
                    if (err)
                        return rej(err);
                    res(appointment);
                });
            });
        };
        AppointmentService.prototype.getPatientAppointments = function (patientId, limit, offset, cb) {
            var _this = this;
            var params = { patientId: patientId, limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_APPOINTMENTS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                var appointments = payload["appointments"].map(function (jsonApp) {
                    var app = new AppointmentModel_1.AppointmentModel();
                    app.fromJson(jsonApp);
                    return app;
                });
                return cb(null, appointments);
            });
        };
        AppointmentService.prototype.getPatientAppointmentsAsync = function (patientId, limit, offset) {
            return __awaiter(this, void 0, void 0, function () {
                var service;
                return __generator(this, function (_a) {
                    service = this;
                    return [2 /*return*/, new Promise(function (res, rej) {
                            service.getPatientAppointments(patientId, limit, offset, function (err, appointments) {
                                if (err)
                                    return rej(err);
                                res(appointments);
                            });
                        })];
                });
            });
        };
        AppointmentService.prototype.getAppointments = function (limit, offset, cb) {
            var _this = this;
            var params = { limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_APPOINTMENTS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["appointments"]);
            });
        };
        AppointmentService.prototype.getAppointmentsAsync = function (limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getAppointments(limit, offset, function (err, appointments) {
                    if (err)
                        return rej(err);
                    res(appointments);
                });
            });
        };
        AppointmentService.prototype.getFilteredAppointments = function (filters, limit, offset, cb) {
            var _this = this;
            var params = { filters: filters.plain(), limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_APPOINTMENTS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["appointments"]);
            });
        };
        AppointmentService.prototype.getFilteredAppointmentsAsync = function (filters, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getFilteredAppointments(filters, limit, offset, function (err, appointments) {
                    if (err)
                        return rej(err);
                    res(appointments);
                });
            });
        };
        AppointmentService.prototype.getAppointmentsCount = function (cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_APPOINTMENTS_COUNT_METHOD, {}, function (err, payload) {
                if (err)
                    return cb(err, null, false);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        AppointmentService.prototype.getAppointmentsCountAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.getAppointmentsCount(function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        AppointmentService.prototype.getPatientAppointmentsCount = function (patientId, cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_APPOINTMENTS_COUNT_METHOD, { patientId: patientId }, function (err, payload) {
                if (err)
                    return cb(err, null, false);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        AppointmentService.prototype.getPatientAppointmentsCountAsync = function (patientId) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatientAppointmentsCount(patientId, function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        return AppointmentService;
    }(jsonRpcService_1.JsonRPCCredService));
    exports.AppointmentService = AppointmentService;
});


/***/ }),

/***/ 6813:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./jsonRpcService", "../AuthService", "../../Handlers", "../../models/PatientModel"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthService = void 0;
    var jsonRpcService_1 = require("./jsonRpcService");
    var AuthService_1 = require("../AuthService");
    var Handlers_1 = require("../../Handlers");
    var PatientModel_1 = require("../../models/PatientModel");
    var AuthService = /** @class */ (function (_super) {
        __extends(AuthService, _super);
        /**
         * В конструктор передается endpoint сервера авторизации и endpoint сервера мед данных.
         *
         * @param authServerEndpoint endpoint сервера авторизации
         * @param ehrServerEndpoint endpoint сервера мед данных
         * @param request функция, выполняющая запрос
         * @param authCred параметры доступа к обоим серверам
         */
        function AuthService(ehrServerEndpoint, authServerEndpoint, cred, request, exchangeTokenMethod, exchangeTokenExtra) {
            var _this = _super.call(this, null, request) || this;
            _this.ehrServerEndpoint_ = ehrServerEndpoint;
            _this.authServerEndpoint_ = authServerEndpoint;
            _this.authCred_ = cred;
            _this.authExchangeTokenMethod_ = exchangeTokenMethod;
            _this.authExchangeTokenExtra_ = exchangeTokenExtra;
            return _this;
        }
        /**
         * Метод выполняет запрос к серверу авторизации для генерации и предоставления exchange_token.
         *
         * @param {Function} cb
         */
        AuthService.prototype.getExchangeToken = function (cb) {
            this.exec(this.authExchangeTokenMethod_, this.authExchangeTokenExtra_, function (err, payload) {
                if (err)
                    return cb(err, null);
                var etr = new AuthService_1.ExchangeTokenResponse();
                etr.exchangeToken = payload["exchangeToken"];
                return cb(null, etr);
            }, this.authServerEndpoint_, this.authCred_);
        };
        AuthService.prototype.getExchangeTokenAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.getExchangeToken(function (err, et) {
                    if (err)
                        return rej(err);
                    res(et);
                });
            });
        };
        /**
         * Метод выполняет запрос к EHR серверу для аутентификации пользователя по его данным.
         *
         * Авторизация выполняется через ранее полученный exchangeToken.
         *
         * @param {string} exchangeToken короткоживущий токен обмена
         * @param {string} searchStrategy
         * @param {PatientInputProperties} patientProperties информация о пациенте для сопоставления
         * @param {string} medCardId
         * @param {Function} cb
         */
        AuthService.prototype.authenticate = function (exchangeToken, searchStrategy, patientProperties, medCardId, cb) {
            if (["PHONE", "MEDCARD"].indexOf(searchStrategy) < 0)
                throw Error("Argument searchStrategy is out of range.");
            var requestData = {
                exchangeToken: exchangeToken,
                searchStrategy: searchStrategy,
                patientProperties: patientProperties,
                medCardId: medCardId,
            };
            this.exec(Handlers_1.Handlers.HANDLER_AUTHENTICATE_METHOD, requestData, function (err, payload) {
                if (err)
                    return cb(err, null, null);
                var patient = new PatientModel_1.PatientModel();
                patient.fromJson(payload["patient"]);
                if (!payload["userSign"])
                    throw new Error("expect userSign");
                return cb(null, patient, payload["userSign"]);
            }, this.ehrServerEndpoint_);
        };
        AuthService.prototype.authenticateAsync = function (exchangeToken, searchStrategy, patientProperties, medCardId) {
            var service = this;
            return new Promise(function (res, rej) {
                service.authenticate(exchangeToken, searchStrategy, patientProperties, medCardId, function (err, patient, userSign) {
                    if (err)
                        return rej(err);
                    res({ patient: patient, userSign: userSign });
                });
            });
        };
        /**
         * Удаление сопоставления креденшиалов пользователя и пациента в МИСе.
         * Удаляет так же все активные сессии данного пользователя.
         *
         * @param cb
         */
        AuthService.prototype.removeAuthentication = function (cb) {
            this.exec(Handlers_1.Handlers.HANDLER_REMOVE_AUTHENTICATION_METHOD, {}, cb, this.ehrServerEndpoint_, this.authCred_);
        };
        AuthService.prototype.removeAuthenticationAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.removeAuthentication(function (err) {
                    if (err)
                        return rej(err);
                    res();
                });
            });
        };
        /**
         * Удаление пользовательской сессии.
         *
         * @param cb
         */
        AuthService.prototype.removeAuthInfo = function (cb) {
            this.exec(Handlers_1.Handlers.HANDLER_REMOVE_AUTH_INFO_METHOD, {}, cb, this.ehrServerEndpoint_, this.authCred_);
        };
        AuthService.prototype.removeAuthInfoAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.removeAuthInfo(function (err) {
                    if (err)
                        return rej(err);
                    res();
                });
            });
        };
        return AuthService;
    }(jsonRpcService_1.JsonRPCService));
    exports.AuthService = AuthService;
});


/***/ }),

/***/ 4068:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../Handlers", "./jsonRpcService"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BusinessInfoService = void 0;
    var Handlers_1 = require("../../Handlers");
    var jsonRpcService_1 = require("./jsonRpcService");
    var BusinessInfoService = /** @class */ (function (_super) {
        __extends(BusinessInfoService, _super);
        function BusinessInfoService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BusinessInfoService.prototype.getBusinessInfo = function (cb) {
            var _this = this;
            var params = {};
            this.exec(Handlers_1.Handlers.HANDLER_GET_BUSINESS_INFO_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["businesses"]);
            });
        };
        BusinessInfoService.prototype.getBusinessInfoAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.getBusinessInfo(function (err, businesses) {
                    if (err)
                        return rej(err);
                    res(businesses);
                });
            });
        };
        return BusinessInfoService;
    }(jsonRpcService_1.JsonRPCCredService));
    exports.BusinessInfoService = BusinessInfoService;
});


/***/ }),

/***/ 373:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./jsonRpcService", "../../Handlers"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiagnosticReportService = void 0;
    var jsonRpcService_1 = require("./jsonRpcService");
    var Handlers_1 = require("../../Handlers");
    var DiagnosticReportService = /** @class */ (function (_super) {
        __extends(DiagnosticReportService, _super);
        function DiagnosticReportService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Возвращает назначение по идентификатору.
         * @param id идентификатор результата записи
         * @param cb callback
         */
        DiagnosticReportService.prototype.getDiagnosticReportById = function (id, cb) {
            var _this_1 = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_DIAGNOSTIC_REPORT_BY_ID_METHOD, { id: id }, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrors_ = payload["validationErrors"];
                return cb(null, payload["diagnosticReport"]);
            });
        };
        DiagnosticReportService.prototype.getDiagnosticReportByIdAsync = function (id) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getDiagnosticReportById(id, function (err, dr) {
                    if (err)
                        return rej(err);
                    // console.log("prescription.id:", appointment.id);
                    res(dr);
                });
            });
        };
        DiagnosticReportService.prototype.getPatientDiagnosticReports = function (patientId, limit, offset, cb) {
            var _this_1 = this;
            var params = { patientId: patientId, limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_DIAGNOSTIC_REPORTS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["diagnosticReports"]);
            });
        };
        DiagnosticReportService.prototype.getPatientDiagnosticReportsAsync = function (patientId, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatientDiagnosticReports(patientId, limit, offset, function (err, reports) {
                    if (err)
                        return rej(err);
                    res(reports);
                });
            });
        };
        DiagnosticReportService.prototype.getDiagnosticReports = function (limit, offset, cb) {
            var _this_1 = this;
            var params = { limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_DIAGNOSTIC_REPORTS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["diagnosticReports"]);
            });
        };
        DiagnosticReportService.prototype.getDiagnosticReportsAsync = function (limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getDiagnosticReports(limit, offset, function (err, reports) {
                    if (err)
                        return rej(err);
                    res(reports);
                });
            });
        };
        DiagnosticReportService.prototype.getFilteredDiagnosticReports = function (filters, limit, offset, cb) {
            var _this_1 = this;
            var params = { filters: filters.plain(), limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_DIAGNOSTIC_REPORTS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["diagnosticReports"]);
            });
        };
        DiagnosticReportService.prototype.getFilteredDiagnosticReportsAsync = function (filters, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getFilteredDiagnosticReports(filters, limit, offset, function (err, reports) {
                    if (err)
                        return rej(err);
                    res(reports);
                });
            });
        };
        DiagnosticReportService.prototype.getDiagnosticReportsCount = function (cb) {
            var _this_1 = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_DIAGNOSTIC_REPORTS_COUNT_METHOD, {}, function (err, payload) {
                if (err)
                    return cb(err, null, false);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        DiagnosticReportService.prototype.getDiagnosticReportsCountAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.getDiagnosticReportsCount(function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        DiagnosticReportService.prototype.getPatientDiagnosticReportsCount = function (patientId, cb) {
            var _this_1 = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_DIAGNOSTIC_REPORTS_COUNT_METHOD, { patientId: patientId }, function (err, payload) {
                if (err)
                    return cb(err, null, false);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        DiagnosticReportService.prototype.getPatientDiagnosticReportsCountAsync = function (patientId) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatientDiagnosticReportsCount(patientId, function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        DiagnosticReportService.prototype.searchDiagnosticReports = function (includes, excludes, filters, limit, offset, cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_SEARCH_DIAGNOSTIC_REPORTS_METHOD, { includes: includes, excludes: excludes, filters: filters.plain(), limit: limit, offset: offset }, function (err, payload) {
                if (err)
                    return cb(err, []);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["diagnosticReports"]);
            });
        };
        DiagnosticReportService.prototype.searchDiagnosticReportsAsync = function (includes, excludes, filters, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.searchDiagnosticReports(includes, excludes, filters, limit, offset, function (err, reports) {
                    if (err)
                        return rej(err);
                    res(reports);
                });
            });
        };
        DiagnosticReportService.prototype.searchDiagnosticReportsCount = function (includes, excludes, filters, cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_SEARCH_DIAGNOSTIC_REPORTS_COUNT_METHOD, { includes: includes, excludes: excludes, filters: filters.plain() }, function (err, payload) {
                if (err)
                    return cb(err, 0, false);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        DiagnosticReportService.prototype.searchDiagnosticReportsCountAsync = function (includes, excludes, filters) {
            var service = this;
            return new Promise(function (res, rej) {
                service.searchDiagnosticReportsCount(includes, excludes, filters, function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        return DiagnosticReportService;
    }(jsonRpcService_1.JsonRPCCredService));
    exports.DiagnosticReportService = DiagnosticReportService;
});


/***/ }),

/***/ 4758:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./jsonRpcService", "../../Handlers", "../../models/PatientModel"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PatientService = void 0;
    var jsonRpcService_1 = require("./jsonRpcService");
    var Handlers_1 = require("../../Handlers");
    var PatientModel_1 = require("../../models/PatientModel");
    var PatientService = /** @class */ (function (_super) {
        __extends(PatientService, _super);
        function PatientService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PatientService.prototype.getPatient = function (cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_METHOD, {}, function (err, payload) {
                if (err)
                    return cb(err);
                if (!payload["userSign"])
                    return cb(new Error("userSign not found"));
                var patient = new PatientModel_1.PatientModel();
                _this.lastValidationErrors_ = payload["validationErrors"];
                patient.fromJson(payload["patient"]);
                return cb(err, patient, payload["userSign"]);
            });
        };
        PatientService.prototype.getPatientAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatient(function (err, patient, userSign) {
                    if (err)
                        return rej(err);
                    res({ patient: patient, userSign: userSign });
                });
            });
        };
        PatientService.prototype.getPatientById = function (id, cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_BY_ID_METHOD, { id: id }, function (err, payload) {
                if (err)
                    return cb(err);
                _this.lastValidationErrors_ = payload["validationErrors"];
                return cb(err, payload["patient"]);
            });
        };
        PatientService.prototype.getPatientByIdAsync = function (id) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatientById(id, function (err, patient) {
                    if (err)
                        return rej(err);
                    res({ patient: patient });
                });
            });
        };
        PatientService.prototype.getPatients = function (limit, offset, cb) {
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENTS_METHOD, { limit: limit, offset: offset }, function (err, payload) {
                if (err)
                    return cb(err, null);
                return cb(err, payload["patients"]);
            });
        };
        PatientService.prototype.getPatientsAsync = function (limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatients(limit, offset, function (err, patients) {
                    if (err)
                        return rej(err);
                    res(patients);
                });
            });
        };
        PatientService.prototype.getFilteredPatients = function (filters, limit, offset, cb) {
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENTS_METHOD, { filters: filters.plain(), limit: limit, offset: offset }, function (err, payload) {
                if (err)
                    return cb(err, null);
                return cb(err, payload["patients"]);
            });
        };
        PatientService.prototype.getFilteredPatientsAsync = function (filters, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getFilteredPatients(filters, limit, offset, function (err, patients) {
                    if (err)
                        return rej(err);
                    res(patients);
                });
            });
        };
        PatientService.prototype.getPatientsCount = function (cb) {
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENTS_COUNT_METHOD, {}, function (err, payload) {
                if (err)
                    return cb(err, null, false);
                return cb(err, payload["count"], payload["support"]);
            });
        };
        PatientService.prototype.getPatientsCountAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatientsCount(function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        return PatientService;
    }(jsonRpcService_1.JsonRPCCredService));
    exports.PatientService = PatientService;
});


/***/ }),

/***/ 1926:
/***/ (function(module, exports) {

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./jsonRpcService", "../../Handlers"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrescriptionService = void 0;
    var jsonRpcService_1 = require("./jsonRpcService");
    var Handlers_1 = require("../../Handlers");
    var PrescriptionService = /** @class */ (function (_super) {
        __extends(PrescriptionService, _super);
        function PrescriptionService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * Возвращает назначение по идентификатору.
         * @param id идентификатор результата записи
         * @param cb callback
         */
        PrescriptionService.prototype.getPrescriptionById = function (id, cb) {
            var _this_1 = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_PRESCRIPTION_BY_ID_METHOD, { id: id }, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrors_ = payload["validationErrors"];
                cb(null, payload["prescription"]);
            });
        };
        PrescriptionService.prototype.getPrescriptionByIdAsync = function (id) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPrescriptionById(id, function (err, pm) {
                    if (err)
                        return rej(err);
                    res(pm);
                });
            });
        };
        PrescriptionService.prototype.getPatientPrescriptions = function (patientId, limit, offset, cb) {
            var _this_1 = this;
            var params = { patientId: patientId, limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_PRESCRIPTIONS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                return cb(null, payload["prescriptions"]);
            });
        };
        PrescriptionService.prototype.getPatientPrescriptionsAsync = function (patientId, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatientPrescriptions(patientId, limit, offset, function (err, values) {
                    if (err)
                        return rej(err);
                    res(values);
                });
            });
        };
        PrescriptionService.prototype.getPrescriptions = function (limit, offset, cb) {
            var _this_1 = this;
            var params = { limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_PRESCRIPTIONS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                return cb(null, payload["prescriptions"]);
            });
        };
        PrescriptionService.prototype.getPrescriptionsAsync = function (limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPrescriptions(limit, offset, function (err, values) {
                    if (err)
                        return rej(err);
                    res(values);
                });
            });
        };
        PrescriptionService.prototype.getFilteredPrescriptions = function (filters, limit, offset, cb) {
            var _this_1 = this;
            var params = { filters: filters.plain(), limit: limit, offset: offset };
            this.exec(Handlers_1.Handlers.HANDLER_GET_PRESCRIPTIONS_METHOD, params, function (err, payload) {
                if (err)
                    return cb(err, null);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                return cb(null, payload["prescriptions"]);
            });
        };
        PrescriptionService.prototype.getFilteredPrescriptionsAsync = function (filters, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getFilteredPrescriptions(filters, limit, offset, function (err, values) {
                    if (err)
                        return rej(err);
                    res(values);
                });
            });
        };
        PrescriptionService.prototype.getPrescriptionsCount = function (cb) {
            var _this_1 = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_PRESCRIPTIONS_COUNT_METHOD, {}, function (err, payload) {
                if (err)
                    return cb(err, null, false);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        PrescriptionService.prototype.getPrescriptionsCountAsync = function () {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPrescriptionsCount(function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        PrescriptionService.prototype.getPatientPrescriptionsCount = function (patientId, cb) {
            var _this_1 = this;
            this.exec(Handlers_1.Handlers.HANDLER_GET_PATIENT_PRESCRIPTIONS_COUNT_METHOD, { patientId: patientId }, function (err, payload) {
                if (err)
                    return cb(err, null, false);
                _this_1.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        PrescriptionService.prototype.getPatientPrescriptionsCountAsync = function (patientId) {
            var service = this;
            return new Promise(function (res, rej) {
                service.getPatientPrescriptionsCount(patientId, function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        PrescriptionService.prototype.searchPrescriptions = function (includes, excludes, filters, limit, offset, cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_SEARCH_PRESCRIPTIONS_METHOD, { includes: includes, excludes: excludes, filters: filters.plain(), limit: limit, offset: offset }, function (err, payload) {
                if (err)
                    return cb(err, []);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["prescriptions"]);
            });
        };
        PrescriptionService.prototype.searchPrescriptionsAsync = function (includes, excludes, filters, limit, offset) {
            var service = this;
            return new Promise(function (res, rej) {
                service.searchPrescriptions(includes, excludes, filters, limit, offset, function (err, reports) {
                    if (err)
                        return rej(err);
                    res(reports);
                });
            });
        };
        PrescriptionService.prototype.searchPrescriptionsCount = function (includes, excludes, filters, cb) {
            var _this = this;
            this.exec(Handlers_1.Handlers.HANDLER_SEARCH_PRESCRIPTIONS_COUNT_METHOD, { includes: includes, excludes: excludes, filters: filters.plain() }, function (err, payload) {
                if (err)
                    return cb(err, 0, false);
                _this.lastValidationErrorsOfList_ = payload["validationErrors"];
                cb(null, payload["count"], payload["support"]);
            });
        };
        PrescriptionService.prototype.searchPrescriptionsCountAsync = function (includes, excludes, filters) {
            var service = this;
            return new Promise(function (res, rej) {
                service.searchPrescriptionsCount(includes, excludes, filters, function (err, count, support) {
                    if (err)
                        return rej(err);
                    res({ count: count, support: support });
                });
            });
        };
        return PrescriptionService;
    }(jsonRpcService_1.JsonRPCCredService));
    exports.PrescriptionService = PrescriptionService;
});


/***/ }),

/***/ 3709:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./xhr", "./AppointmentService", "./AppointmentResultService", "./PrescriptionService", "./DiagnosticReportService", "./AuthService", "./PatientService", "./BusinessInfoService", "./jsonRpcRequest"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    var xhr_1 = __nccwpck_require__(1966);
    var AppointmentService_1 = __nccwpck_require__(824);
    var AppointmentResultService_1 = __nccwpck_require__(7136);
    var PrescriptionService_1 = __nccwpck_require__(1926);
    var DiagnosticReportService_1 = __nccwpck_require__(373);
    var AuthService_1 = __nccwpck_require__(6813);
    var PatientService_1 = __nccwpck_require__(4758);
    var BusinessInfoService_1 = __nccwpck_require__(4068);
    var jsonRpcRequest_1 = __nccwpck_require__(2854);
    exports.default = {
        Transports: {
            xhr: xhr_1.xhr,
        },
        JsonRpcHeader: jsonRpcRequest_1.JsonRpcHeader,
        AppointmentService: AppointmentService_1.AppointmentService,
        AppointmentResultService: AppointmentResultService_1.AppointmentResultService,
        PrescriptionService: PrescriptionService_1.PrescriptionService,
        DiagnosticReportService: DiagnosticReportService_1.DiagnosticReportService,
        AuthService: AuthService_1.AuthService,
        PatientService: PatientService_1.PatientService,
        BusinessInfoService: BusinessInfoService_1.BusinessInfoService,
    };
});


/***/ }),

/***/ 2854:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.JsonRpcHeader = void 0;
    var JsonRpcHeader = /** @class */ (function () {
        function JsonRpcHeader(id, method, cred, apiKey) {
            if (cred === void 0) { cred = null; }
            if (apiKey === void 0) { apiKey = null; }
            this._id = id;
            this._method = method;
            this._cred = cred;
            this._apiKey = apiKey;
        }
        Object.defineProperty(JsonRpcHeader.prototype, "id", {
            get: function () {
                return this._id;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(JsonRpcHeader.prototype, "method", {
            get: function () {
                return this._method;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(JsonRpcHeader.prototype, "cred", {
            get: function () {
                return this._cred;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(JsonRpcHeader.prototype, "apiKey", {
            get: function () {
                return this._apiKey;
            },
            enumerable: false,
            configurable: true
        });
        return JsonRpcHeader;
    }());
    exports.JsonRpcHeader = JsonRpcHeader;
});


/***/ }),

/***/ 4882:
/***/ (function(module, exports) {

/*
 jsonrpc 2.0 extention for the "cred" property supports.
*/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./jsonrpc"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.requestCred = exports.RequestCredObject = void 0;
    var jsonrpc = require("./jsonrpc");
    var RequestCredObject = /** @class */ (function (_super) {
        __extends(RequestCredObject, _super);
        function RequestCredObject(id, method, cred, apiKey, params) {
            var _this = _super.call(this, id, method, params) || this;
            _this.cred = cred;
            _this.apiKey = apiKey;
            return _this;
        }
        return RequestCredObject;
    }(jsonrpc.RequestObject));
    exports.RequestCredObject = RequestCredObject;
    /**
     * Creates a JSON-RPC 2.0 request object with "cred" property.
     *
     * @param  {String|Integer} id
     * @param  {String} method
     * @param  {Credentials} cred
     * @param  {Object|Array} [params]: optional
     * @return {Object} JsonRpc object
     * @api public
     */
    function requestCred(id, method, cred, apiKey, params) {
        // call "standart" request function for validate message
        jsonrpc.request(id, method, params);
        return new RequestCredObject(id, method, cred, apiKey, params);
    }
    exports.requestCred = requestCred;
});


/***/ }),

/***/ 1966:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../AuthService", "./jsonrpc_cred"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.xhr = void 0;
    var AuthService_1 = __nccwpck_require__(4274);
    if (typeof window === "undefined") {
        var XMLHttpRequest = __nccwpck_require__(315);
    }
    else {
        var XMLHttpRequest = window.XMLHttpRequest;
    }
    var jsonrpc_cred_1 = __nccwpck_require__(4882);
    var verbose = true;
    var debug = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (verbose)
            console.debug.apply(console, args);
    };
    exports.xhr = function (endpoint, header, requestPayload, cb) {
        var _this = this;
        var req = new XMLHttpRequest();
        req.responseType = "json";
        req.withCredentials = true;
        req.onload = function (res) {
            var target = res.target;
            if (target.status >= 400)
                cb(new Error("status code " + target.status));
            else if (target.response) {
                var jsonRpcResponse = target.response;
                if (jsonRpcResponse.result)
                    cb(null, jsonRpcResponse.result);
                else if (jsonRpcResponse.error)
                    cb(jsonRpcResponse.error);
                else
                    cb(new Error("wrong json-rpc format " + jsonRpcResponse));
            }
            else
                cb(new Error("wrong json format"));
        };
        req.onerror = function (res) {
            var target = res.target;
            console.error("onerror " + _this.status + "\n" + target.response);
            if (target.status === 0)
                return cb(new AuthService_1.ConnectionError(), null);
            cb(new Error("error request " + endpoint + " method #" + header.method), null);
        };
        req.open("POST", endpoint, true);
        //req.overrideMimeType('application/json;charset=UTF-8');
        req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
        debug(header.method + " cred=" + JSON.stringify(header.cred) + " apikey=" + header.apiKey + "\n" + JSON.stringify(requestPayload));
        //console.trace();
        var jsonRpcRequest = jsonrpc_cred_1.requestCred(header.id, header.method, header.cred, header.apiKey, requestPayload);
        debug("jsonRpcRequest.serialize()", jsonRpcRequest.serialize());
        req.send(jsonRpcRequest.serialize());
    };
});


/***/ }),

/***/ 6550:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.AppointmentConfirmationStatus = void 0;
    var AppointmentConfirmationStatus;
    (function (AppointmentConfirmationStatus) {
        AppointmentConfirmationStatus[AppointmentConfirmationStatus["Tentative"] = 0] = "Tentative";
        AppointmentConfirmationStatus[AppointmentConfirmationStatus["ConfirmedByClient"] = 1] = "ConfirmedByClient";
        AppointmentConfirmationStatus[AppointmentConfirmationStatus["ConfirmedByBusiness"] = 2] = "ConfirmedByBusiness";
        AppointmentConfirmationStatus[AppointmentConfirmationStatus["CancelledByClient"] = 3] = "CancelledByClient";
        AppointmentConfirmationStatus[AppointmentConfirmationStatus["CancelledByBusiness"] = 4] = "CancelledByBusiness";
    })(AppointmentConfirmationStatus = exports.AppointmentConfirmationStatus || (exports.AppointmentConfirmationStatus = {}));
});


/***/ }),

/***/ 1349:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.AppointmentHistoryItem = void 0;
    var AppointmentHistoryItem = /** @class */ (function () {
        function AppointmentHistoryItem() {
        }
        return AppointmentHistoryItem;
    }());
    exports.AppointmentHistoryItem = AppointmentHistoryItem;
});


/***/ }),

/***/ 1153:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.AppointmentInputProperties = void 0;
    var AppointmentInputProperties = /** @class */ (function () {
        function AppointmentInputProperties() {
        }
        return AppointmentInputProperties;
    }());
    exports.AppointmentInputProperties = AppointmentInputProperties;
});


/***/ }),

/***/ 9196:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.BusinessInfo = void 0;
    var BusinessInfo = /** @class */ (function () {
        function BusinessInfo() {
        }
        BusinessInfo.prototype.fromJson = function (json) {
            this.id = json.id;
            this.name = json.name;
            this.location = json.location;
            this.networkId = json.networkId;
            return this;
        };
        BusinessInfo.prototype.toJson = function () {
            var payload = {};
            payload.id = this.id;
            payload.name = this.name;
            payload.location = this.location;
            payload.networkId = this.networkId;
            return payload;
        };
        return BusinessInfo;
    }());
    exports.BusinessInfo = BusinessInfo;
});


/***/ }),

/***/ 6390:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Discount"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ClientPrice = void 0;
    var Discount_1 = __nccwpck_require__(7423);
    var ClientPrice = /** @class */ (function () {
        function ClientPrice() {
            this.discount = new Discount_1.Discount();
        }
        ClientPrice.prototype.fromJson = function (json) {
            this.currency = json.currency;
            this.originValue = json.originValue;
            this.discountValue = json.discountValue;
            this.value = json.value;
            if (json.discount)
                this.discount.fromJson(json.discount);
            return this;
        };
        ClientPrice.prototype.toJson = function () {
            var payload = {};
            payload.currency = this.currency;
            payload.originValue = this.originValue;
            payload.discountValue = this.discountValue;
            payload.value = this.value;
            payload.discount = this.discount ? this.discount.toJson() : null;
            return payload;
        };
        return ClientPrice;
    }());
    exports.ClientPrice = ClientPrice;
});


/***/ }),

/***/ 7637:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Currency = void 0;
    var Currency;
    (function (Currency) {
        Currency[Currency["Rur"] = 0] = "Rur";
        Currency[Currency["Usd"] = 1] = "Usd";
    })(Currency = exports.Currency || (exports.Currency = {}));
});


/***/ }),

/***/ 2523:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Diagnosis = void 0;
    var Diagnosis = /** @class */ (function () {
        /**
         * Cоздание объекта "диагноз" из json объекта.
         * @param json json object
         */
        function Diagnosis(json) {
            this.description = json.description;
            this.cd10 = json.cd10;
        }
        Diagnosis.prototype.toJson = function () {
            var payload = {};
            payload.description = this.description;
            payload.cd10 = this.cd10;
            return payload;
        };
        return Diagnosis;
    }());
    exports.Diagnosis = Diagnosis;
});


/***/ }),

/***/ 7423:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Discount = void 0;
    var Discount = /** @class */ (function () {
        function Discount() {
        }
        Discount.prototype.fromJson = function (json) {
            this.discountType = json.discountType;
            this.discountPercent = json.discountPercent;
            return this;
        };
        Discount.prototype.toJson = function () {
            var payload = {};
            payload.discountType = this.discountType;
            payload.discountPercent = this.discountPercent;
            return payload;
        };
        return Discount;
    }());
    exports.Discount = Discount;
});


/***/ }),

/***/ 9146:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.DiscountType = void 0;
    var DiscountType;
    (function (DiscountType) {
        DiscountType[DiscountType["Percent"] = 0] = "Percent";
        DiscountType[DiscountType["Absolute"] = 1] = "Absolute";
    })(DiscountType = exports.DiscountType || (exports.DiscountType = {}));
});


/***/ }),

/***/ 8061:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Specialization"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Doctor = void 0;
    var Specialization_1 = __nccwpck_require__(6981);
    var Doctor = /** @class */ (function () {
        function Doctor() {
        }
        Doctor.prototype.fromJson = function (json) {
            this.id = json.id;
            this.surname = json.surname;
            this.name = json.name;
            this.specialization = json.specialization
                ? new Specialization_1.Specialization().fromJson(json.specialization)
                : new Specialization_1.Specialization();
            return this;
        };
        Doctor.prototype.toJson = function () {
            var payload = {};
            payload.id = this.id;
            payload.surname = this.surname;
            payload.name = this.name;
            payload.specialization = this.specialization
                ? this.specialization.toJson()
                : null;
            return payload;
        };
        return Doctor;
    }());
    exports.Doctor = Doctor;
});


/***/ }),

/***/ 1723:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Medication = void 0;
    var Medication = /** @class */ (function () {
        function Medication() {
        }
        Medication.prototype.fromJson = function (json) {
            this.name = json.name;
            this.code = json.code;
            this.codeTable = json.codeTable;
            this.reference = json.reference;
            this.itemSize = json.itemSize;
            this.dosageText = json.dosageText;
            this.form = json.from;
            this.amount = json.amount;
            this.expirationDate = json.expirationDate;
        };
        Medication.prototype.toJson = function () {
            var payload = {};
            payload.name = this.name;
            payload.code = this.code;
            payload.codeTable = this.codeTable;
            payload.reference = this.reference;
            payload.itemSize = this.itemSize;
            payload.dosageText = this.dosageText;
            payload.form = this.form;
            payload.amount = this.amount;
            payload.expirationDate = this.expirationDate.toJSON();
            return payload;
        };
        return Medication;
    }());
    exports.Medication = Medication;
});


/***/ }),

/***/ 6295:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ObservationType = void 0;
    var ObservationType;
    (function (ObservationType) {
        ObservationType[ObservationType["Observation"] = 1] = "Observation";
        ObservationType[ObservationType["LaboratoryTest"] = 2] = "LaboratoryTest";
    })(ObservationType = exports.ObservationType || (exports.ObservationType = {}));
});


/***/ }),

/***/ 4934:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.PatientInfo = void 0;
    var PatientInfo = /** @class */ (function () {
        function PatientInfo() {
        }
        PatientInfo.prototype.fromJson = function (json) {
            this.id = json.id;
            this.surname = json.surname;
            this.name = json.name;
            this.middleName = json.middleName;
            this.phones = json.phones;
            this.email = json.email;
            this.gender = json.gender;
            this.date = json.date;
            this.medcardNumber = json.medcardNumber;
            return this;
        };
        PatientInfo.prototype.toJson = function () {
            var payload = {};
            payload.id = this.id;
            payload.surname = this.surname;
            payload.name = this.name;
            payload.middleName = this.middleName;
            payload.phones = this.phones;
            payload.email = this.email;
            payload.gender = this.gender;
            payload.date = this.date.toJSON();
            payload.medcardNumber = this.medcardNumber;
            return payload;
        };
        return PatientInfo;
    }());
    exports.PatientInfo = PatientInfo;
});


/***/ }),

/***/ 3815:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.PatientInputProperties = void 0;
    var PatientInputProperties = /** @class */ (function () {
        function PatientInputProperties() {
        }
        PatientInputProperties.prototype.fromJson = function (json) {
            this.id = json.id;
            this.surname = json.surname;
            this.name = json.name;
            this.middleName = json.middleName;
            this.phone = json.phone;
            this.email = json.email;
            this.gender = json.gender;
            this.date = json.date;
            return this;
        };
        return PatientInputProperties;
    }());
    exports.PatientInputProperties = PatientInputProperties;
});


/***/ }),

/***/ 9022:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Period = exports.TextPeriod = void 0;
    var TextPeriod = /** @class */ (function () {
        function TextPeriod() {
        }
        return TextPeriod;
    }());
    exports.TextPeriod = TextPeriod;
    var Period = /** @class */ (function () {
        function Period() {
        }
        Period.prototype.fromJson = function (json) {
            this.begin = new Date(json.begin);
            this.end = new Date(json.end);
            return this;
        };
        Period.prototype.toJson = function () {
            var payload = {};
            payload.begin = this.begin.toJSON();
            payload.end = this.end.toJSON();
            return payload;
        };
        return Period;
    }());
    exports.Period = Period;
});


/***/ }),

/***/ 5552:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Doctor", "./Medication", "./Period"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.PrescriptionInfo = void 0;
    var Doctor_1 = __nccwpck_require__(8061);
    var Medication_1 = __nccwpck_require__(1723);
    var Period_1 = __nccwpck_require__(9022);
    var PrescriptionInfo = /** @class */ (function () {
        function PrescriptionInfo() {
        }
        PrescriptionInfo.prototype.fromJson = function (json) {
            this.id = json.id;
            this.created = new Date(json.created);
            if (json.recorderDoctor)
                this.recorderDoctor = new Doctor_1.Doctor().fromJson(json.recorderDoctor);
            this.medications = json.medications
                ? json.medications.map(function (m) { return new Medication_1.Medication().fromJson(m); })
                : [];
            this.dosageText = json.dosageText;
            this.reasonText = json.reasonText;
            this.validityPeriod = json.validityPeriod
                ? new Period_1.Period().fromJson(json.validityPeriod)
                : new Period_1.Period();
            this.numberOfRepeats = json.numberOfRepeats;
            this.title = json.title;
            return this;
        };
        PrescriptionInfo.prototype.toJson = function () {
            var payload = {};
            payload.id = this.id;
            payload.created = this.created.toJSON();
            payload.recorderDoctor = this.recorderDoctor.toJson();
            payload.medications = this.medications
                ? this.medications.map(function (m) { return m.toJson(); })
                : [];
            payload.dosageText = this.dosageText;
            payload.reasonText = this.reasonText;
            payload.validityPeriod = this.validityPeriod.toJson();
            payload.numberOfRepeats = this.numberOfRepeats;
            payload.title = this.title;
            return payload;
        };
        return PrescriptionInfo;
    }());
    exports.PrescriptionInfo = PrescriptionInfo;
});


/***/ }),

/***/ 9743:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./Service", "./Period"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Procedure = void 0;
    var Service_1 = __nccwpck_require__(1382);
    var Period_1 = __nccwpck_require__(9022);
    var Procedure = /** @class */ (function () {
        function Procedure() {
            this.services = [];
            this.period = new Period_1.Period();
            this.strictPeriod = new Period_1.Period();
            this.preparations = [];
            this.requiredPreparations = [];
        }
        Procedure.prototype.fromJson = function (json) {
            this.id = json.id;
            this.created = json.created;
            this.title = json.title;
            this.services = json.services
                ? json.services.map(function (s) { return new Service_1.Service().fromJson(s); })
                : [];
            this.type = json.type;
            this.required = json.required;
            this.status = json.status;
            if (json.period)
                this.period.fromJson(json.period);
            if (json.strictPeriod)
                this.strictPeriod.fromJson(json.strictPeriod);
            this.preparations = json.preparations;
            this.requiredPreparations = json.requiredPreparations;
            this.appointmentResultId = this.appointmentResultId;
            return this;
        };
        Procedure.prototype.toJson = function () {
            var payload = {};
            payload.id = this.id;
            payload.created = this.created.toJSON();
            payload.title = this.title;
            payload.services = this.services
                ? this.services.map(function (s) { return s.toJson(); })
                : [];
            payload.type = this.type;
            payload.required = this.required;
            payload.status = this.status;
            payload.period = this.period.toJson();
            payload.strictPeriod = this.strictPeriod.toJson();
            payload.preparations = this.preparations;
            payload.requiredPreparations = this.requiredPreparations;
            payload.appointmentResultId = this.appointmentResultId;
            return payload;
        };
        return Procedure;
    }());
    exports.Procedure = Procedure;
});


/***/ }),

/***/ 7320:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ProcedureExecStatus = void 0;
    var ProcedureExecStatus;
    (function (ProcedureExecStatus) {
        ProcedureExecStatus[ProcedureExecStatus["Scheduled"] = 0] = "Scheduled";
        ProcedureExecStatus[ProcedureExecStatus["InProgress"] = 1] = "InProgress";
        ProcedureExecStatus[ProcedureExecStatus["Rejected"] = 2] = "Rejected";
        ProcedureExecStatus[ProcedureExecStatus["Completed"] = 3] = "Completed";
    })(ProcedureExecStatus = exports.ProcedureExecStatus || (exports.ProcedureExecStatus = {}));
});


/***/ }),

/***/ 6728:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ProcedureInfo = void 0;
    var ProcedureInfo = /** @class */ (function () {
        /**
         * Создание объекта "информация о процедуре" по объекту json.
         *
         * @param json json object
         */
        function ProcedureInfo(json) {
            this.id = json.id;
            this.title = json.title;
            this.status = json.status;
            this.type = json.type;
            this.required = json.required;
        }
        return ProcedureInfo;
    }());
    exports.ProcedureInfo = ProcedureInfo;
});


/***/ }),

/***/ 6531:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.ProcedureType = void 0;
    var ProcedureType;
    (function (ProcedureType) {
        ProcedureType[ProcedureType["Recomendation"] = 0] = "Recomendation";
        ProcedureType[ProcedureType["Precedure"] = 1] = "Precedure";
        ProcedureType[ProcedureType["Analisys"] = 2] = "Analisys";
    })(ProcedureType = exports.ProcedureType || (exports.ProcedureType = {}));
});


/***/ }),

/***/ 1382:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./ClientPrice"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Service = void 0;
    var ClientPrice_1 = __nccwpck_require__(6390);
    var Service = /** @class */ (function () {
        function Service() {
            this.price = new ClientPrice_1.ClientPrice();
        }
        Service.prototype.fromJson = function (json) {
            this.id = json.id;
            this.name = json.name;
            if (json.price)
                this.price.fromJson(json.price);
            this.duration = json.duration;
            return this;
        };
        Service.prototype.toJson = function () {
            var payload = {};
            payload.id = this.id;
            payload.name = this.name;
            payload.price = this.price ? this.price.toJson() : null;
            payload.duration = this.duration;
            return payload;
        };
        return Service;
    }());
    exports.Service = Service;
});


/***/ }),

/***/ 6981:
/***/ ((module, exports) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Specialization = void 0;
    var Specialization = /** @class */ (function () {
        function Specialization() {
        }
        Specialization.prototype.fromJson = function (json) {
            this.id = json.id;
            this.name = json.name;
            return this;
        };
        Specialization.prototype.toJson = function () {
            var payload = {};
            payload.id = this.id;
            payload.name = this.name;
            return payload;
        };
        return Specialization;
    }());
    exports.Specialization = Specialization;
});


/***/ }),

/***/ 2464:
/***/ ((module, exports, __nccwpck_require__) => {

(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./BusinessInfo", "./Doctor", "./Service", "./AppointmentConfirmationStatus", "./ClientPrice", "./AppointmentHistoryItem", "./AppointmentInputProperties", "./Currency", "./Diagnosis", "./ProcedureExecStatus", "./ProcedureType", "./ProcedureInfo", "./Procedure", "./PrescriptionInfo", "./PatientInfo", "./PatientInputProperties", "./Medication", "./Period"], factory);
    }
})(function () {
    "use strict";
    Object.defineProperty(exports, "__esModule", ({ value: true }));
    exports.Period = exports.Medication = exports.PatientInputProperties = exports.PatientInfo = exports.PrescriptionInfo = exports.Procedure = exports.ProcedureInfo = exports.ProcedureType = exports.ProcedureExecStatus = exports.Diagnosis = exports.AppointmentInputProperties = exports.AppointmentHistoryItem = exports.Currency = exports.ClientPrice = exports.AppointmentConfirmationStatus = exports.Service = exports.Doctor = exports.BusinessInfo = void 0;
    var BusinessInfo_1 = __nccwpck_require__(9196);
    Object.defineProperty(exports, "BusinessInfo", ({ enumerable: true, get: function () { return BusinessInfo_1.BusinessInfo; } }));
    var Doctor_1 = __nccwpck_require__(8061);
    Object.defineProperty(exports, "Doctor", ({ enumerable: true, get: function () { return Doctor_1.Doctor; } }));
    var Service_1 = __nccwpck_require__(1382);
    Object.defineProperty(exports, "Service", ({ enumerable: true, get: function () { return Service_1.Service; } }));
    var AppointmentConfirmationStatus_1 = __nccwpck_require__(6550);
    Object.defineProperty(exports, "AppointmentConfirmationStatus", ({ enumerable: true, get: function () { return AppointmentConfirmationStatus_1.AppointmentConfirmationStatus; } }));
    var ClientPrice_1 = __nccwpck_require__(6390);
    Object.defineProperty(exports, "ClientPrice", ({ enumerable: true, get: function () { return ClientPrice_1.ClientPrice; } }));
    var AppointmentHistoryItem_1 = __nccwpck_require__(1349);
    Object.defineProperty(exports, "AppointmentHistoryItem", ({ enumerable: true, get: function () { return AppointmentHistoryItem_1.AppointmentHistoryItem; } }));
    var AppointmentInputProperties_1 = __nccwpck_require__(1153);
    Object.defineProperty(exports, "AppointmentInputProperties", ({ enumerable: true, get: function () { return AppointmentInputProperties_1.AppointmentInputProperties; } }));
    var Currency_1 = __nccwpck_require__(7637);
    Object.defineProperty(exports, "Currency", ({ enumerable: true, get: function () { return Currency_1.Currency; } }));
    var Diagnosis_1 = __nccwpck_require__(2523);
    Object.defineProperty(exports, "Diagnosis", ({ enumerable: true, get: function () { return Diagnosis_1.Diagnosis; } }));
    var ProcedureExecStatus_1 = __nccwpck_require__(7320);
    Object.defineProperty(exports, "ProcedureExecStatus", ({ enumerable: true, get: function () { return ProcedureExecStatus_1.ProcedureExecStatus; } }));
    var ProcedureType_1 = __nccwpck_require__(6531);
    Object.defineProperty(exports, "ProcedureType", ({ enumerable: true, get: function () { return ProcedureType_1.ProcedureType; } }));
    var ProcedureInfo_1 = __nccwpck_require__(6728);
    Object.defineProperty(exports, "ProcedureInfo", ({ enumerable: true, get: function () { return ProcedureInfo_1.ProcedureInfo; } }));
    var Procedure_1 = __nccwpck_require__(9743);
    Object.defineProperty(exports, "Procedure", ({ enumerable: true, get: function () { return Procedure_1.Procedure; } }));
    var PrescriptionInfo_1 = __nccwpck_require__(5552);
    Object.defineProperty(exports, "PrescriptionInfo", ({ enumerable: true, get: function () { return PrescriptionInfo_1.PrescriptionInfo; } }));
    var PatientInfo_1 = __nccwpck_require__(4934);
    Object.defineProperty(exports, "PatientInfo", ({ enumerable: true, get: function () { return PatientInfo_1.PatientInfo; } }));
    var PatientInputProperties_1 = __nccwpck_require__(3815);
    Object.defineProperty(exports, "PatientInputProperties", ({ enumerable: true, get: function () { return PatientInputProperties_1.PatientInputProperties; } }));
    var Medication_1 = __nccwpck_require__(1723);
    Object.defineProperty(exports, "Medication", ({ enumerable: true, get: function () { return Medication_1.Medication; } }));
    var Period_1 = __nccwpck_require__(9022);
    Object.defineProperty(exports, "Period", ({ enumerable: true, get: function () { return Period_1.Period; } }));
});


/***/ }),

/***/ 8605:
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ 7211:
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ 2087:
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ 8835:
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __nccwpck_require__(5818);
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;